{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\17514\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// import Handlebars from \"handlebars\"\n// import { Component } from 'react'\n// import './App.css'\n\n// var oldHref = \"http://localhost:3000\"\n\n// var SETUP = 0;\n// var CHOOSEMOVE = 1;\n// var MOVE = 2;\n// var BUILD = 4;\n// var FINISH = 5;\n// var USEPOWER = 6;\n\n// interface Cell {\n//   levels: number;\n//   player: number;\n//   pos: String;\n//   text: String;\n//   chosen: number\n// }\n\n// interface GameCells {\n//   cells: Array<Cell>,\n//   template: HandlebarsTemplateDelegate<any>,\n//   nextPlayer: number,\n//   nextMove: number,\n//   linkheader: String,\n//   showError: boolean,\n//   instruction: String,\n//   finish: boolean,\n\n//   selectGod: boolean,\n//   selectGodError: boolean,\n\n//   god1msg: String,\n//   god2msg: String,\n\n//   canUse1: boolean,\n//   canUse2: boolean,\n\n// }\n\n// interface Props {\n// }\n\n// class App extends Component<Props, GameCells> {\n//   constructor(props: Props) {\n//     super(props);\n//     this.state = {\n//       cells: [\n//         { levels: 0, player: 0, pos: \"x=0&y=0\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=0&y=1\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=0&y=2\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=0&y=3\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=0&y=4\", text: \"0\", chosen: 0 },\n\n//         { levels: 0, player: 0, pos: \"x=1&y=0\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=1&y=1\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=1&y=2\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=1&y=3\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=1&y=4\", text: \"0\", chosen: 0 },\n\n//         { levels: 0, player: 0, pos: \"x=2&y=0\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=2&y=1\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=2&y=2\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=2&y=3\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=2&y=4\", text: \"0\", chosen: 0 },\n\n//         { levels: 0, player: 0, pos: \"x=3&y=0\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=3&y=1\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=3&y=2\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=3&y=3\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=3&y=4\", text: \"0\", chosen: 0 },\n\n//         { levels: 0, player: 0, pos: \"x=4&y=0\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=4&y=1\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=4&y=2\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=4&y=3\", text: \"0\", chosen: 0 },\n//         { levels: 0, player: 0, pos: \"x=4&y=4\", text: \"0\", chosen: 0 },\n//       ],\n//       showError: false,\n//       nextPlayer: 1,\n//       nextMove: 0,\n//       template: this.loadTemplate(),\n//       linkheader: \"setup?\",\n//       instruction: \"choose the position of your worker\",\n//       finish: false,\n\n//       selectGod: false,\n//       selectGodError: false,\n\n//       god1msg: \"No God Mode\",\n//       god2msg: \"No God Mode\",\n\n//       canUse1: false,\n//       canUse2: false,\n\n//     };\n//   }\n\n//   loadTemplate (): HandlebarsTemplateDelegate<any> {\n//     const src = document.getElementById(\"handlebars\");\n//     return Handlebars.compile(src?.innerHTML, {});\n//   }\n\n//   /* modified */ \n//   convertToCell(p: any, playerId: number): Array<Cell> {\n//     var NUMCOLS: number = 5;\n//     const newCells: Array<Cell> = [];\n//     for (var i = 0; i < p.length; i++) {\n//       var x: number = Math.floor(i / NUMCOLS);\n//       var y: number = i % NUMCOLS;\n\n//       var gridLevels: number = p[i][\"levels\"];\n//       var gridPlayer: number = p[i][\"player\"];\n\n//       var textLeft: String = \"\";\n//       var textRight: String = \"\";\n//       if (gridPlayer === 1) {\n//         textLeft = \"(\";\n//         textRight = \")\";\n//       } else if (gridPlayer === 2) {\n//         textLeft = \"[\";\n//         textRight = \"]\";\n//       } \n//       var gridText = textLeft + gridLevels.toString() + textRight;\n//       var chosenVal = p[i][\"chosen\"] === 1 ? playerId : 0; \n\n//       var c: Cell = {\n//         levels: gridLevels,\n//         player: gridPlayer,\n//         pos: \"x=\" + x + \"&y=\" + y,\n//         text: gridText,\n//         chosen: chosenVal\n//       };\n//       newCells.push(c);\n//     }\n\n//     return newCells;\n//   }\n\n//   /* new */\n//   async newGame() {\n//     const href = \"newgame\";\n//     console.log(href);\n//     await fetch(href);\n//   }\n\n//   /* new */\n//   async selectGod(err: boolean) {\n//     console.log(\"entered\");\n//     this.setState({selectGod: true})\n//     if (err) {\n//       this.setState({selectGodError: true})\n//     }\n//   }\n\n//   /* new */\n//   async newGodGame(url: String) {\n//     const params = (url.split(\"?\")[1]).split(\"&\");\n//     var godName1 = params[0].split(\"=\")[1];\n//     var godName2 = params[1].split(\"=\")[1];\n//     if (godName1 === godName2) {\n//       this.selectGod(true);\n//     } else {\n//       const href = \"newgodgame?\" + url.split(\"?\")[1];\n//       console.log(href);\n//       await fetch(href);\n//       this.setState({ god1msg: godName1 })\n//       this.setState({ god2msg: godName2 })\n\n//     }\n\n//   }\n\n//   /* new */\n//   async testAPI() {\n//     console.log(\"testing API connection...\");\n//     const response = await fetch(\"test\");\n//     const json = await response.json();\n//     console.log(json);\n//   };\n\n//   /* new */\n//   async setAllStates(json: any) {\n//     console.log(json);\n\n//     if (json[\"status\"] !== 0) {\n//       this.setState({showError: true});\n//     } else {\n//       this.setState({showError: false});\n//     }\n\n//     var playerId = json[\"playerId\"];\n//     var nextAction = json[\"nextAction\"];\n\n//     const newCells: Array<Cell> = this.convertToCell(json[\"board\"], playerId);\n//     this.setState({ cells: newCells });\n//     this.setState({ nextPlayer: playerId});\n//     this.setState({ nextMove: nextAction});\n//     this.setState({ finish: false});\n\n//     if (nextAction === SETUP) {\n//       this.setState({ linkheader: \"setup?\"});\n//       this.setState({ instruction: \"choose the position of your worker\"});\n//     } else if (nextAction === CHOOSEMOVE) {\n//       this.setState({ linkheader: \"choosemove?\"});\n//       this.setState({ instruction: \"select one of your workers to move\"});\n//     } else if (nextAction === MOVE) {\n//       this.setState({ linkheader: \"move?\"});\n//       this.setState({ instruction: \"select the target position of your move\"});\n//     } else if (nextAction === BUILD) {\n//       this.setState({ linkheader: \"build?\"});\n//       this.setState({ instruction: \"select the target position of your build\"});\n//     } else if (nextAction === FINISH) {\n//       this.setState({ linkheader: \"\"});\n//       this.setState({ instruction: \"YOU WON!\"});\n//       this.setState({ finish: true});\n//     } else if (nextAction === USEPOWER) {\n//       this.setState({ linkheader: \"usepoweraction?\"});\n//       this.setState({ instruction: \"Player Using God Power...\"});\n//     } else {\n//       console.log(\"err: nextAction not specified or unexpected value!\")\n//     }\n\n//     if (json.hasOwnProperty('god1')) {\n//       this.setState({ god1msg: json[\"god1\"]});\n//     }\n//     if (json.hasOwnProperty('god2')) {\n//       this.setState({ god2msg: json[\"god2\"]});\n//     }\n\n//     if (json.hasOwnProperty('canUse1')) {\n//       this.setState({ canUse1: json[\"canUse1\"]});\n//     }\n//     if (json.hasOwnProperty('canUse2')) {\n//       this.setState({ canUse2: json[\"canUse2\"]});\n//     }\n\n//   }\n\n//   /* new */\n//   async setUp(url: String) {\n//     const href = \"setup?\" + url.split(\"?\")[1];\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async chooseMove(url: String) {\n//     const href = \"choosemove?\" + url.split(\"?\")[1];\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async move(url: String) {\n//     const href = \"move?\" + url.split(\"?\")[1];\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async build(url: String) {\n//     const href = \"build?\" + url.split(\"?\")[1];\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async preparePower1() {\n//     const href = \"preparepower1\"\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n//   }\n\n//   /* new */\n//   async preparePower2() {\n//     const href = \"preparepower2\"\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n//   }\n\n//   /* new */\n//   async usePower(url: String) {\n//     const href = \"usepower?\" + url.split(\"?\")[1];\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async undo(url: String) {\n//     const href = \"undo\";\n//     console.log(href);\n//     const response = await fetch(href);\n//     const json = await response.json();\n\n//     this.setAllStates(json);\n\n//   }\n\n//   /* new */\n//   async step() {\n//     if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/setup\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.setUp(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/choosemove\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.chooseMove(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/move\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.move(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/build\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.build(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/newgame\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.newGame();\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/newgodgame\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       console.log(\"new god game!\");\n//       this.selectGod(false);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/startGodGame\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.newGodGame(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepower1\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.preparePower1();\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepower2\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.preparePower2();\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepoweraction\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.usePower(window.location.href);\n//       oldHref = window.location.href;\n//     } else if (\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/undo\" &&\n//       oldHref !== window.location.href\n//     ) {\n//       this.undo(window.location.href);\n//       oldHref = window.location.href;\n//     } \n//   }\n\n//   render() {\n\n//     this.step()\n//     return (\n\n//       <div className=\"App\">\n//         <div\n//           dangerouslySetInnerHTML={{\n//             __html: this.state.template({ \n//               cells: this.state.cells, \n//               linkheader: this.state.linkheader, \n//               showError: this.state.showError ? \"error\" : \"noerror\",\n//               instruction: this.state.instruction,\n//               player: this.state.nextPlayer === 1 ? \"player1\" : \"player2\",\n//               finish: this.state.finish,\n\n//               selectGod: this.state.selectGod ? \"appear\" : \"disappear\",\n//               selectGodError: this.state.selectGodError ? \"appear\" : \"disappear\",\n\n//               god1msg: this.state.god1msg,\n//               god2msg: this.state.god2msg,\n\n//               canUse1: this.state.canUse1 ? \"appear\" : \"disappear\",\n//               canUse2: this.state.canUse2 ? \"appear\" : \"disappear\",\n\n//             }), \n//           }}\n//         />\n//       </div>\n//     )\n//   };\n// };\n\n// export default App;\n// 定义棋盘格子的类型\nimport React, { useState } from 'react';\nimport './App.css'; // 确保有CSS文件来进行基本的样式设置\n// 定义棋盘格子的类型\n\n// 定义棋盘状态的类型\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 初始化棋盘的函数\nconst createInitialBoard = () => {\n  const board = [];\n  for (let i = 0; i < 5; i++) {\n    const row = [];\n    for (let j = 0; j < 5; j++) {\n      row.push({\n        hasWorker: false,\n        workerPlayer: null\n      });\n    }\n    board.push(row);\n  }\n  return board;\n};\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(createInitialBoard());\n\n  // 处理点击棋盘格子的事件\n  const handleCellClick = async (x, y) => {\n    const url = `http://localhost:8080/setup?x1=${x}&y1=${y}&x2=${x}&y2=${y}`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      if (data.success) {\n        const newBoard = [...board];\n        newBoard[x][y] = {\n          hasWorker: true,\n          workerPlayer: data.player\n        };\n        setBoard(newBoard);\n      } else {\n        console.error('Error placing worker:', data.error);\n      }\n    } catch (error) {\n      console.error('Failed to place worker:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"board\",\n    children: [\" \", board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardRow\",\n      children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${cell.hasWorker ? 'hasWorker' : ''}`,\n        onClick: () => handleCellClick(rowIndex, cellIndex),\n        children: cell.hasWorker ? `Player ${cell.workerPlayer}` : ''\n      }, `${rowIndex}-${cellIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Gl3nfxAxlGCUsXVFmHBoSOCCcKk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","createInitialBoard","board","i","row","j","push","hasWorker","workerPlayer","App","_s","setBoard","handleCellClick","x","y","url","response","fetch","method","data","json","success","newBoard","player","console","error","id","children","map","rowIndex","className","cell","cellIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/17514/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["// import Handlebars from \"handlebars\"\r\n// import { Component } from 'react'\r\n// import './App.css'\r\n\r\n// var oldHref = \"http://localhost:3000\"\r\n\r\n// var SETUP = 0;\r\n// var CHOOSEMOVE = 1;\r\n// var MOVE = 2;\r\n// var BUILD = 4;\r\n// var FINISH = 5;\r\n// var USEPOWER = 6;\r\n\r\n// interface Cell {\r\n//   levels: number;\r\n//   player: number;\r\n//   pos: String;\r\n//   text: String;\r\n//   chosen: number\r\n// }\r\n\r\n// interface GameCells {\r\n//   cells: Array<Cell>,\r\n//   template: HandlebarsTemplateDelegate<any>,\r\n//   nextPlayer: number,\r\n//   nextMove: number,\r\n//   linkheader: String,\r\n//   showError: boolean,\r\n//   instruction: String,\r\n//   finish: boolean,\r\n\r\n//   selectGod: boolean,\r\n//   selectGodError: boolean,\r\n\r\n//   god1msg: String,\r\n//   god2msg: String,\r\n\r\n//   canUse1: boolean,\r\n//   canUse2: boolean,\r\n\r\n// }\r\n\r\n// interface Props {\r\n// }\r\n\r\n// class App extends Component<Props, GameCells> {\r\n//   constructor(props: Props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       cells: [\r\n//         { levels: 0, player: 0, pos: \"x=0&y=0\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=0&y=1\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=0&y=2\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=0&y=3\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=0&y=4\", text: \"0\", chosen: 0 },\r\n\r\n//         { levels: 0, player: 0, pos: \"x=1&y=0\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=1&y=1\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=1&y=2\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=1&y=3\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=1&y=4\", text: \"0\", chosen: 0 },\r\n\r\n//         { levels: 0, player: 0, pos: \"x=2&y=0\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=2&y=1\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=2&y=2\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=2&y=3\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=2&y=4\", text: \"0\", chosen: 0 },\r\n\r\n//         { levels: 0, player: 0, pos: \"x=3&y=0\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=3&y=1\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=3&y=2\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=3&y=3\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=3&y=4\", text: \"0\", chosen: 0 },\r\n\r\n//         { levels: 0, player: 0, pos: \"x=4&y=0\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=4&y=1\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=4&y=2\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=4&y=3\", text: \"0\", chosen: 0 },\r\n//         { levels: 0, player: 0, pos: \"x=4&y=4\", text: \"0\", chosen: 0 },\r\n//       ],\r\n//       showError: false,\r\n//       nextPlayer: 1,\r\n//       nextMove: 0,\r\n//       template: this.loadTemplate(),\r\n//       linkheader: \"setup?\",\r\n//       instruction: \"choose the position of your worker\",\r\n//       finish: false,\r\n\r\n//       selectGod: false,\r\n//       selectGodError: false,\r\n\r\n//       god1msg: \"No God Mode\",\r\n//       god2msg: \"No God Mode\",\r\n\r\n//       canUse1: false,\r\n//       canUse2: false,\r\n\r\n//     };\r\n//   }\r\n\r\n//   loadTemplate (): HandlebarsTemplateDelegate<any> {\r\n//     const src = document.getElementById(\"handlebars\");\r\n//     return Handlebars.compile(src?.innerHTML, {});\r\n//   }\r\n\r\n//   /* modified */ \r\n//   convertToCell(p: any, playerId: number): Array<Cell> {\r\n//     var NUMCOLS: number = 5;\r\n//     const newCells: Array<Cell> = [];\r\n//     for (var i = 0; i < p.length; i++) {\r\n//       var x: number = Math.floor(i / NUMCOLS);\r\n//       var y: number = i % NUMCOLS;\r\n      \r\n//       var gridLevels: number = p[i][\"levels\"];\r\n//       var gridPlayer: number = p[i][\"player\"];\r\n\r\n//       var textLeft: String = \"\";\r\n//       var textRight: String = \"\";\r\n//       if (gridPlayer === 1) {\r\n//         textLeft = \"(\";\r\n//         textRight = \")\";\r\n//       } else if (gridPlayer === 2) {\r\n//         textLeft = \"[\";\r\n//         textRight = \"]\";\r\n//       } \r\n//       var gridText = textLeft + gridLevels.toString() + textRight;\r\n//       var chosenVal = p[i][\"chosen\"] === 1 ? playerId : 0; \r\n      \r\n//       var c: Cell = {\r\n//         levels: gridLevels,\r\n//         player: gridPlayer,\r\n//         pos: \"x=\" + x + \"&y=\" + y,\r\n//         text: gridText,\r\n//         chosen: chosenVal\r\n//       };\r\n//       newCells.push(c);\r\n//     }\r\n\r\n//     return newCells;\r\n//   }\r\n\r\n//   /* new */\r\n//   async newGame() {\r\n//     const href = \"newgame\";\r\n//     console.log(href);\r\n//     await fetch(href);\r\n//   }\r\n\r\n//   /* new */\r\n//   async selectGod(err: boolean) {\r\n//     console.log(\"entered\");\r\n//     this.setState({selectGod: true})\r\n//     if (err) {\r\n//       this.setState({selectGodError: true})\r\n//     }\r\n//   }\r\n\r\n//   /* new */\r\n//   async newGodGame(url: String) {\r\n//     const params = (url.split(\"?\")[1]).split(\"&\");\r\n//     var godName1 = params[0].split(\"=\")[1];\r\n//     var godName2 = params[1].split(\"=\")[1];\r\n//     if (godName1 === godName2) {\r\n//       this.selectGod(true);\r\n//     } else {\r\n//       const href = \"newgodgame?\" + url.split(\"?\")[1];\r\n//       console.log(href);\r\n//       await fetch(href);\r\n//       this.setState({ god1msg: godName1 })\r\n//       this.setState({ god2msg: godName2 })\r\n\r\n//     }\r\n    \r\n//   }\r\n\r\n//   /* new */\r\n//   async testAPI() {\r\n//     console.log(\"testing API connection...\");\r\n//     const response = await fetch(\"test\");\r\n//     const json = await response.json();\r\n//     console.log(json);\r\n//   };\r\n\r\n//   /* new */\r\n//   async setAllStates(json: any) {\r\n//     console.log(json);\r\n\r\n//     if (json[\"status\"] !== 0) {\r\n//       this.setState({showError: true});\r\n//     } else {\r\n//       this.setState({showError: false});\r\n//     }\r\n\r\n//     var playerId = json[\"playerId\"];\r\n//     var nextAction = json[\"nextAction\"];\r\n\r\n//     const newCells: Array<Cell> = this.convertToCell(json[\"board\"], playerId);\r\n//     this.setState({ cells: newCells });\r\n//     this.setState({ nextPlayer: playerId});\r\n//     this.setState({ nextMove: nextAction});\r\n//     this.setState({ finish: false});\r\n\r\n//     if (nextAction === SETUP) {\r\n//       this.setState({ linkheader: \"setup?\"});\r\n//       this.setState({ instruction: \"choose the position of your worker\"});\r\n//     } else if (nextAction === CHOOSEMOVE) {\r\n//       this.setState({ linkheader: \"choosemove?\"});\r\n//       this.setState({ instruction: \"select one of your workers to move\"});\r\n//     } else if (nextAction === MOVE) {\r\n//       this.setState({ linkheader: \"move?\"});\r\n//       this.setState({ instruction: \"select the target position of your move\"});\r\n//     } else if (nextAction === BUILD) {\r\n//       this.setState({ linkheader: \"build?\"});\r\n//       this.setState({ instruction: \"select the target position of your build\"});\r\n//     } else if (nextAction === FINISH) {\r\n//       this.setState({ linkheader: \"\"});\r\n//       this.setState({ instruction: \"YOU WON!\"});\r\n//       this.setState({ finish: true});\r\n//     } else if (nextAction === USEPOWER) {\r\n//       this.setState({ linkheader: \"usepoweraction?\"});\r\n//       this.setState({ instruction: \"Player Using God Power...\"});\r\n//     } else {\r\n//       console.log(\"err: nextAction not specified or unexpected value!\")\r\n//     }\r\n\r\n//     if (json.hasOwnProperty('god1')) {\r\n//       this.setState({ god1msg: json[\"god1\"]});\r\n//     }\r\n//     if (json.hasOwnProperty('god2')) {\r\n//       this.setState({ god2msg: json[\"god2\"]});\r\n//     }\r\n\r\n//     if (json.hasOwnProperty('canUse1')) {\r\n//       this.setState({ canUse1: json[\"canUse1\"]});\r\n//     }\r\n//     if (json.hasOwnProperty('canUse2')) {\r\n//       this.setState({ canUse2: json[\"canUse2\"]});\r\n//     }\r\n\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async setUp(url: String) {\r\n//     const href = \"setup?\" + url.split(\"?\")[1];\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async chooseMove(url: String) {\r\n//     const href = \"choosemove?\" + url.split(\"?\")[1];\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async move(url: String) {\r\n//     const href = \"move?\" + url.split(\"?\")[1];\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async build(url: String) {\r\n//     const href = \"build?\" + url.split(\"?\")[1];\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async preparePower1() {\r\n//     const href = \"preparepower1\"\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n//   }\r\n\r\n//   /* new */\r\n//   async preparePower2() {\r\n//     const href = \"preparepower2\"\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n//   }\r\n\r\n//   /* new */\r\n//   async usePower(url: String) {\r\n//     const href = \"usepower?\" + url.split(\"?\")[1];\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n\r\n//   /* new */\r\n//   async undo(url: String) {\r\n//     const href = \"undo\";\r\n//     console.log(href);\r\n//     const response = await fetch(href);\r\n//     const json = await response.json();\r\n\r\n//     this.setAllStates(json);\r\n\r\n//   }\r\n  \r\n\r\n//   /* new */\r\n//   async step() {\r\n//     if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/setup\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.setUp(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/choosemove\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.chooseMove(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/move\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.move(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/build\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.build(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/newgame\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.newGame();\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/newgodgame\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       console.log(\"new god game!\");\r\n//       this.selectGod(false);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/startGodGame\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.newGodGame(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepower1\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.preparePower1();\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepower2\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.preparePower2();\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/usepoweraction\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.usePower(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } else if (\r\n//       window.location.href.split(\"?\")[0] === \"http://localhost:3000/undo\" &&\r\n//       oldHref !== window.location.href\r\n//     ) {\r\n//       this.undo(window.location.href);\r\n//       oldHref = window.location.href;\r\n//     } \r\n//   }\r\n\r\n//   render() {\r\n  \r\n//     this.step()\r\n//     return (\r\n    \r\n//       <div className=\"App\">\r\n//         <div\r\n//           dangerouslySetInnerHTML={{\r\n//             __html: this.state.template({ \r\n//               cells: this.state.cells, \r\n//               linkheader: this.state.linkheader, \r\n//               showError: this.state.showError ? \"error\" : \"noerror\",\r\n//               instruction: this.state.instruction,\r\n//               player: this.state.nextPlayer === 1 ? \"player1\" : \"player2\",\r\n//               finish: this.state.finish,\r\n\r\n//               selectGod: this.state.selectGod ? \"appear\" : \"disappear\",\r\n//               selectGodError: this.state.selectGodError ? \"appear\" : \"disappear\",\r\n\r\n//               god1msg: this.state.god1msg,\r\n//               god2msg: this.state.god2msg,\r\n\r\n//               canUse1: this.state.canUse1 ? \"appear\" : \"disappear\",\r\n//               canUse2: this.state.canUse2 ? \"appear\" : \"disappear\",\r\n\r\n//             }), \r\n//           }}\r\n//         />\r\n//       </div>\r\n//     )\r\n//   };\r\n// };\r\n\r\n// export default App;\r\n// 定义棋盘格子的类型\r\nimport React, { useState } from 'react';\r\nimport './App.css'; // 确保有CSS文件来进行基本的样式设置\r\n// 定义棋盘格子的类型\r\ninterface Cell {\r\n    hasWorker: boolean;\r\n    workerPlayer: number | null;\r\n  }\r\n  \r\n  // 定义棋盘状态的类型\r\n  type Board = Cell[][];\r\n  // 初始化棋盘的函数\r\nconst createInitialBoard = (): Board => {\r\n    const board: Board = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      const row: Cell[] = [];\r\n      for (let j = 0; j < 5; j++) {\r\n        row.push({ hasWorker: false, workerPlayer: null });\r\n      }\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  };\r\n  \r\n  const App: React.FC = () => {\r\n    const [board, setBoard] = useState<Board>(createInitialBoard());\r\n  \r\n    // 处理点击棋盘格子的事件\r\n    const handleCellClick = async (x: number, y: number): Promise<void> => {\r\n      const url = `http://localhost:8080/setup?x1=${x}&y1=${y}&x2=${x}&y2=${y}`;\r\n      try {\r\n        const response = await fetch(url, { method: 'POST' });\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          const newBoard: Board = [...board];\r\n          newBoard[x][y] = { hasWorker: true, workerPlayer: data.player };\r\n          setBoard(newBoard);\r\n        } else {\r\n          console.error('Error placing worker:', data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to place worker:', error);\r\n      }\r\n    };\r\n  \r\n    return (\r\n        <div id=\"board\"> {/* 从 className=\"gameBoard\" 改为 id=\"board\" */}\r\n          {board.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"boardRow\">\r\n              {row.map((cell, cellIndex) => (\r\n                <div\r\n                  key={`${rowIndex}-${cellIndex}`}\r\n                  className={`cell ${cell.hasWorker ? 'hasWorker' : ''}`}\r\n                  onClick={() => handleCellClick(rowIndex, cellIndex)}\r\n                >\r\n                  {cell.hasWorker ? `Player ${cell.workerPlayer}` : ''}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n  }\r\n  \r\n  export default App;\r\n  "],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW,CAAC,CAAC;AACpB;;AAME;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA;AACF,MAAMC,kBAAkB,GAAGA,CAAA,KAAa;EACpC,MAAMC,KAAY,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAMC,GAAW,GAAG,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,GAAG,CAACE,IAAI,CAAC;QAAEC,SAAS,EAAE,KAAK;QAAEC,YAAY,EAAE;MAAK,CAAC,CAAC;IACpD;IACAN,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC;EACjB;EACA,OAAOF,KAAK;AACd,CAAC;AAED,MAAMO,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGb,QAAQ,CAAQG,kBAAkB,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAMW,eAAe,GAAG,MAAAA,CAAOC,CAAS,EAAEC,CAAS,KAAoB;IACrE,MAAMC,GAAG,GAAI,kCAAiCF,CAAE,OAAMC,CAAE,OAAMD,CAAE,OAAMC,CAAE,EAAC;IACzE,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAAEG,MAAM,EAAE;MAAO,CAAC,CAAC;MACrD,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,MAAMC,QAAe,GAAG,CAAC,GAAGpB,KAAK,CAAC;QAClCoB,QAAQ,CAACT,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;UAAEP,SAAS,EAAE,IAAI;UAAEC,YAAY,EAAEW,IAAI,CAACI;QAAO,CAAC;QAC/DZ,QAAQ,CAACW,QAAQ,CAAC;MACpB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEN,IAAI,CAACM,KAAK,CAAC;MACpD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACIzB,OAAA;IAAK0B,EAAE,EAAC,OAAO;IAAAC,QAAA,GAAC,GAAC,EACdzB,KAAK,CAAC0B,GAAG,CAAC,CAACxB,GAAG,EAAEyB,QAAQ,kBACvB7B,OAAA;MAAoB8B,SAAS,EAAC,UAAU;MAAAH,QAAA,EACrCvB,GAAG,CAACwB,GAAG,CAAC,CAACG,IAAI,EAAEC,SAAS,kBACvBhC,OAAA;QAEE8B,SAAS,EAAG,QAAOC,IAAI,CAACxB,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;QACvD0B,OAAO,EAAEA,CAAA,KAAMrB,eAAe,CAACiB,QAAQ,EAAEG,SAAS,CAAE;QAAAL,QAAA,EAEnDI,IAAI,CAACxB,SAAS,GAAI,UAASwB,IAAI,CAACvB,YAAa,EAAC,GAAG;MAAE,GAJ9C,GAAEqB,QAAS,IAAGG,SAAU,EAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAK5B,CACN;IAAC,GATMR,QAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUb,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEZ,CAAC;AAAA3B,EAAA,CAtCKD,GAAa;AAAA6B,EAAA,GAAb7B,GAAa;AAwCnB,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}