{"ast":null,"code":"// import React, {useState} from 'react';\n// import {CellData, GameState} from './game.tsx';\n// import Cell from './Cell.tsx'\n// import './App.css';\n\n// /**\n//  * The main React functional component for the board game.\n//  * It handles the game state, player actions, and rendering of the game board.\n//  * The component manages the initialization, movement, and building actions,\n//  * as well as the handling and selection of god cards.\n//  */\n// const App: React.FC = () => {\n//     /**\n//      * Initialize the game grid with a default structure for each cell.\n//      * Cells have properties: level, dome status, and occupation status.\n//      */\n//     const initialGrid: CellData[][] = Array.from({ length: 5 }, () =>\n//         Array.from({ length: 5 }, () => ({\n//             level: 0, // Initial level of construction\n//             hasDome: false, // Dome status, false initially\n//             isOccupied: 2, // 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\n//         }))\n//     );\n\n//     /**\n//      * Set up the initial game state with default values.\n//      * Includes grid, current player, game status, winning condition, and message.\n//      */\n//     const initialGameState: GameState = {\n//         grid: initialGrid,\n//         currentPlayer: 0, // Start with player 0\n//         status: 'initialize', // Initial status for game setup\n//         isWinning: false, // Flag to track if winning condition is met\n//         message: \"\" // Game state message\n//     };\n\n//     // State hooks for managing game state\n//     const [gameState, setGameState] = useState<GameState>(initialGameState);\n//     const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null); // Track selected piece\n//     const [gameStarted, setGameStarted] = useState<boolean>(false); // Flag to track if the game has started\n//     const [godCardsSelected, setGodCardsSelected] = useState(0); // Counter for selected god cards\n//     const [useGodCards, setUseGodCards] = useState(false); // Flag to indicate god card usage\n\n//     /**\n//      * Function to handle the selection of a god card.\n//      * Sends a request to the server and updates the game state accordingly.\n//      */\n//     const handleSelectGodCard = async (godCardName: string) => {\n//         setGodCardsSelected(godCardsSelected + 1); // Increment god card selection counter\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/setGodClass?godCardName=${godCardName}`); // Send request to server\n//             await checkAndSetResponse(response); // Process response and update state\n//         } catch (error) {\n//             console.error('Error fetching data: ', error); // Handle fetch errors\n//         }\n//     };\n\n//     /**\n//      * Function to handle passing an action.\n//      * Sends a request to pass the current action and updates the game state.\n//      */\n//     const handlePassAction = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:8080/api/passAction?`);\n//             await checkAndSetResponse(response);\n//         } catch (error) {\n//             console.error('Error fetching data: ', error);\n//         }\n//     };\n\n//     /**\n//      * Handle clicks on cells in the game grid.\n//      * Depending on the game state, different actions are triggered (initialize, move, build).\n//      */\n//     const handleCellClick = async (x: number, y: number) => {\n//         console.log(`Cell clicked: (${x}, ${y})`);\n//         try {\n//             // No action if the game is over\n//             if (gameState.isWinning) {\n//                 return;\n//             }\n\n//             if (selectedPiece === null) {\n//                 // Perform build action if status is build\n//                 if (gameState.status === 'build') {\n//                     const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\n//                     await checkAndSetResponse(response);\n//                 } else {\n//                     // set the selected cell, which will be highlighted\n//                     setSelectedPiece({x, y});\n//                 }\n//             } else {\n//                 // Coordinates of the previously selected piece\n//                 let x1: number = selectedPiece.x;\n//                 let y1: number = selectedPiece.y;\n//                 // Perform actions based on the game's current status\n//                 if(gameState.status === 'initialize') {\n//                     // Initialize worker positions on the board\n//                     const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n//                     await checkAndSetResponse(response);\n//                 } else if (gameState.status === 'move') {\n//                     // Move worker from selected position to clicked position\n//                     const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n//                     await checkAndSetResponse(response);\n//                 }\n//             }\n//         } catch (error) {\n//             console.error('Error fetching data: ', error);\n//         }\n//     };\n\n//     /**\n//      * Toggles the use of god cards in the game.\n//      * Enables or disables the selection of god cards based on player choice.\n//      */\n//     const handleUseGodCards = (useGodCards : boolean) => {\n//         // Update the state to reflect the use or non-use of god cards in this game\n//         setUseGodCards(useGodCards);\n//         // If god cards are not being used, set selected god cards as 2 to skip god card selection.\n//         if (!useGodCards) {\n//             setGodCardsSelected(2);\n//         }\n//     };\n\n//     /**\n//      * Starts a new game.\n//      * Resets the game state and fetches the initial state from the server.\n//      */\n//     const newGame = async () => {\n//         // Set the game as started and reset god cards state\n//         setGameStarted(true)\n//         setUseGodCards(false);\n//         setGodCardsSelected(0);\n\n//         // Fetch the initial game state from the server\n//         const response = await fetch(`/api/newGame`);\n//         await checkAndSetResponse(response);\n//     };\n\n//     /**\n//      * Helper function to check the server response and update the game state.\n//      */\n//     const checkAndSetResponse = async (response: Response) => {\n//         if (!response.ok) {\n//             throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n//         // If the response is OK, parse it as JSON which returns the new game state\n//         const newGameState: GameState = await response.json();\n//         setGameState(newGameState); // Update game state with response data\n//         setSelectedPiece(null); // Reset selected piece after state update\n//     };\n\n//     return (\n//         <div>\n//             {/* Button to start a new game */}\n//             <button onClick={newGame} className=\"new-game-button\">New Game</button>\n\n//             {/* Conditionally render buttons to choose using god cards or not, based on game state */}\n//             {gameStarted && !useGodCards && godCardsSelected === 0 && (\n//                 <div>\n//                     <button onClick={() => handleUseGodCards(true)} className=\"use-god-card-button\">Use God Cards</button>\n//                     <button onClick={() => handleUseGodCards(false)} className=\"use-god-card-button\">No God Cards</button>\n//                 </div>\n//             )}\n\n//             {/* Render options for selecting god cards, displayed only if god cards are being used and not all have been selected */}\n//             {gameStarted && useGodCards && godCardsSelected < 2 && (\n//                 <div>\n//                     <div className=\"select-info\">\n//                         {`Player ${godCardsSelected} is selecting a God Card`}\n//                     </div>\n//                     <button onClick={() => handleSelectGodCard('Demeter')} className=\"god-card-button\">Demeter</button>\n//                     <button onClick={() => handleSelectGodCard('Hephaestus')} className=\"god-card-button\">Hephaestus</button>\n//                     <button onClick={() => handleSelectGodCard('Minotaur')} className=\"god-card-button\">Minotaur</button>\n//                     <button onClick={() => handleSelectGodCard('Pan')} className=\"god-card-button\">Pan</button>\n//                     <button onClick={() => handleSelectGodCard('Atlas')} className=\"god-card-button\">Atlas</button>\n//                     <button onClick={() => handleSelectGodCard('Apollo')} className=\"god-card-button\">Apollo</button>\n//                     <button onClick={() => handleSelectGodCard('Artemis')} className=\"god-card-button\">Artemis</button>\n//                 </div>\n//             )}\n\n//             {/* Render the game board and display the current game state information after god card selection*/}\n//             {gameStarted && godCardsSelected === 2 && (\n//                 <div>\n//                     {/* Game board display with each cell mapped to a Cell component */}\n//                     <div className=\"game-board\">\n//                         {gameState.grid.map((row, rowIndex) => (\n//                             <div key={rowIndex} className=\"board-row\">\n//                                 {row.map((cellData, colIndex) => (\n//                                     <Cell\n//                                         key={`${rowIndex}-${colIndex}`}\n//                                         cellData={cellData}\n//                                         onCellClick={handleCellClick}\n//                                         x={rowIndex}\n//                                         y={colIndex}\n//                                         className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-cell' : ''}\n//                                     />\n//                                 ))}\n//                             </div>\n//                         ))}\n//                     </div>\n\n//                     {/* Button to pass the turn, available only when god cards are in use and no player has won yet */}\n//                     <div>\n//                         {useGodCards && !gameState.isWinning && (\n//                             <button onClick={handlePassAction} className={'pass-button'}>Pass Extra Action</button>\n//                         )}\n//                     </div>\n\n//                     {/* Display game state messages such as the current player, status, and if someone has won */}\n//                     <div className=\"game-state-message\">\n//                         {'Message: ' + gameState.message}\n//                     </div>\n//                     <div className=\"game-info\">\n//                         {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\n//                     </div>\n\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["// import React, {useState} from 'react';\r\n// import {CellData, GameState} from './game.tsx';\r\n// import Cell from './Cell.tsx'\r\n// import './App.css';\r\n\r\n// /**\r\n//  * The main React functional component for the board game.\r\n//  * It handles the game state, player actions, and rendering of the game board.\r\n//  * The component manages the initialization, movement, and building actions,\r\n//  * as well as the handling and selection of god cards.\r\n//  */\r\n// const App: React.FC = () => {\r\n//     /**\r\n//      * Initialize the game grid with a default structure for each cell.\r\n//      * Cells have properties: level, dome status, and occupation status.\r\n//      */\r\n//     const initialGrid: CellData[][] = Array.from({ length: 5 }, () =>\r\n//         Array.from({ length: 5 }, () => ({\r\n//             level: 0, // Initial level of construction\r\n//             hasDome: false, // Dome status, false initially\r\n//             isOccupied: 2, // 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\r\n//         }))\r\n//     );\r\n\r\n//     /**\r\n//      * Set up the initial game state with default values.\r\n//      * Includes grid, current player, game status, winning condition, and message.\r\n//      */\r\n//     const initialGameState: GameState = {\r\n//         grid: initialGrid,\r\n//         currentPlayer: 0, // Start with player 0\r\n//         status: 'initialize', // Initial status for game setup\r\n//         isWinning: false, // Flag to track if winning condition is met\r\n//         message: \"\" // Game state message\r\n//     };\r\n\r\n//     // State hooks for managing game state\r\n//     const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n//     const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null); // Track selected piece\r\n//     const [gameStarted, setGameStarted] = useState<boolean>(false); // Flag to track if the game has started\r\n//     const [godCardsSelected, setGodCardsSelected] = useState(0); // Counter for selected god cards\r\n//     const [useGodCards, setUseGodCards] = useState(false); // Flag to indicate god card usage\r\n\r\n//     /**\r\n//      * Function to handle the selection of a god card.\r\n//      * Sends a request to the server and updates the game state accordingly.\r\n//      */\r\n//     const handleSelectGodCard = async (godCardName: string) => {\r\n//         setGodCardsSelected(godCardsSelected + 1); // Increment god card selection counter\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/setGodClass?godCardName=${godCardName}`); // Send request to server\r\n//             await checkAndSetResponse(response); // Process response and update state\r\n//         } catch (error) {\r\n//             console.error('Error fetching data: ', error); // Handle fetch errors\r\n//         }\r\n//     };\r\n\r\n//     /**\r\n//      * Function to handle passing an action.\r\n//      * Sends a request to pass the current action and updates the game state.\r\n//      */\r\n//     const handlePassAction = async () => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:8080/api/passAction?`);\r\n//             await checkAndSetResponse(response);\r\n//         } catch (error) {\r\n//             console.error('Error fetching data: ', error);\r\n//         }\r\n//     };\r\n\r\n\r\n//     /**\r\n//      * Handle clicks on cells in the game grid.\r\n//      * Depending on the game state, different actions are triggered (initialize, move, build).\r\n//      */\r\n//     const handleCellClick = async (x: number, y: number) => {\r\n//         console.log(`Cell clicked: (${x}, ${y})`);\r\n//         try {\r\n//             // No action if the game is over\r\n//             if (gameState.isWinning) {\r\n//                 return;\r\n//             }\r\n\r\n//             if (selectedPiece === null) {\r\n//                 // Perform build action if status is build\r\n//                 if (gameState.status === 'build') {\r\n//                     const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\r\n//                     await checkAndSetResponse(response);\r\n//                 } else {\r\n//                     // set the selected cell, which will be highlighted\r\n//                     setSelectedPiece({x, y});\r\n//                 }\r\n//             } else {\r\n//                 // Coordinates of the previously selected piece\r\n//                 let x1: number = selectedPiece.x;\r\n//                 let y1: number = selectedPiece.y;\r\n//                 // Perform actions based on the game's current status\r\n//                 if(gameState.status === 'initialize') {\r\n//                     // Initialize worker positions on the board\r\n//                     const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n//                     await checkAndSetResponse(response);\r\n//                 } else if (gameState.status === 'move') {\r\n//                     // Move worker from selected position to clicked position\r\n//                     const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n//                     await checkAndSetResponse(response);\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error fetching data: ', error);\r\n//         }\r\n//     };\r\n\r\n//     /**\r\n//      * Toggles the use of god cards in the game.\r\n//      * Enables or disables the selection of god cards based on player choice.\r\n//      */\r\n//     const handleUseGodCards = (useGodCards : boolean) => {\r\n//         // Update the state to reflect the use or non-use of god cards in this game\r\n//         setUseGodCards(useGodCards);\r\n//         // If god cards are not being used, set selected god cards as 2 to skip god card selection.\r\n//         if (!useGodCards) {\r\n//             setGodCardsSelected(2);\r\n//         }\r\n//     };\r\n\r\n//     /**\r\n//      * Starts a new game.\r\n//      * Resets the game state and fetches the initial state from the server.\r\n//      */\r\n//     const newGame = async () => {\r\n//         // Set the game as started and reset god cards state\r\n//         setGameStarted(true)\r\n//         setUseGodCards(false);\r\n//         setGodCardsSelected(0);\r\n\r\n//         // Fetch the initial game state from the server\r\n//         const response = await fetch(`/api/newGame`);\r\n//         await checkAndSetResponse(response);\r\n//     };\r\n\r\n//     /**\r\n//      * Helper function to check the server response and update the game state.\r\n//      */\r\n//     const checkAndSetResponse = async (response: Response) => {\r\n//         if (!response.ok) {\r\n//             throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         // If the response is OK, parse it as JSON which returns the new game state\r\n//         const newGameState: GameState = await response.json();\r\n//         setGameState(newGameState); // Update game state with response data\r\n//         setSelectedPiece(null); // Reset selected piece after state update\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             {/* Button to start a new game */}\r\n//             <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n\r\n//             {/* Conditionally render buttons to choose using god cards or not, based on game state */}\r\n//             {gameStarted && !useGodCards && godCardsSelected === 0 && (\r\n//                 <div>\r\n//                     <button onClick={() => handleUseGodCards(true)} className=\"use-god-card-button\">Use God Cards</button>\r\n//                     <button onClick={() => handleUseGodCards(false)} className=\"use-god-card-button\">No God Cards</button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {/* Render options for selecting god cards, displayed only if god cards are being used and not all have been selected */}\r\n//             {gameStarted && useGodCards && godCardsSelected < 2 && (\r\n//                 <div>\r\n//                     <div className=\"select-info\">\r\n//                         {`Player ${godCardsSelected} is selecting a God Card`}\r\n//                     </div>\r\n//                     <button onClick={() => handleSelectGodCard('Demeter')} className=\"god-card-button\">Demeter</button>\r\n//                     <button onClick={() => handleSelectGodCard('Hephaestus')} className=\"god-card-button\">Hephaestus</button>\r\n//                     <button onClick={() => handleSelectGodCard('Minotaur')} className=\"god-card-button\">Minotaur</button>\r\n//                     <button onClick={() => handleSelectGodCard('Pan')} className=\"god-card-button\">Pan</button>\r\n//                     <button onClick={() => handleSelectGodCard('Atlas')} className=\"god-card-button\">Atlas</button>\r\n//                     <button onClick={() => handleSelectGodCard('Apollo')} className=\"god-card-button\">Apollo</button>\r\n//                     <button onClick={() => handleSelectGodCard('Artemis')} className=\"god-card-button\">Artemis</button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {/* Render the game board and display the current game state information after god card selection*/}\r\n//             {gameStarted && godCardsSelected === 2 && (\r\n//                 <div>\r\n//                     {/* Game board display with each cell mapped to a Cell component */}\r\n//                     <div className=\"game-board\">\r\n//                         {gameState.grid.map((row, rowIndex) => (\r\n//                             <div key={rowIndex} className=\"board-row\">\r\n//                                 {row.map((cellData, colIndex) => (\r\n//                                     <Cell\r\n//                                         key={`${rowIndex}-${colIndex}`}\r\n//                                         cellData={cellData}\r\n//                                         onCellClick={handleCellClick}\r\n//                                         x={rowIndex}\r\n//                                         y={colIndex}\r\n//                                         className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-cell' : ''}\r\n//                                     />\r\n//                                 ))}\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n\r\n//                     {/* Button to pass the turn, available only when god cards are in use and no player has won yet */}\r\n//                     <div>\r\n//                         {useGodCards && !gameState.isWinning && (\r\n//                             <button onClick={handlePassAction} className={'pass-button'}>Pass Extra Action</button>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     {/* Display game state messages such as the current player, status, and if someone has won */}\r\n//                     <div className=\"game-state-message\">\r\n//                         {'Message: ' + gameState.message}\r\n//                     </div>\r\n//                     <div className=\"game-info\">\r\n//                         {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default App;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}