{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GameState } from './game.tsx';\nimport { Cell } from './Cell.tsx';\nimport './App.css';\n\n/**\r\n * GameState interface defines the structure of the overall state of the game.\r\n * It includes properties that represent the current state of the game.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * The main React functional component for the board game.\r\n * It handles the game state, player actions, and rendering of the game board.\r\n * The component manages the initialization, movement, and building actions,\r\n * as well as the handling and selection of god cards.\r\n */\nconst App = () => {\n  _s();\n  /**\r\n   * Initialize the game grid with a default structure for each cell.\r\n   * Cells have properties: level, dome status, and occupation status.\r\n   */\n  const initialGrid = Array.from({\n    length: 5\n  }, () => Array.from({\n    length: 5\n  }, () => ({\n    height: 0,\n    // Initial level of construction\n    hasDome: false,\n    // Dome status, false initially\n    occupyStatus: -1 // 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\n  })));\n\n  /**\r\n   * Set up the initial game state with default values.\r\n   * Includes grid, current player, game status, winning condition, and message.\r\n   */\n  const initialGameState = {\n    grid: initialGrid,\n    currentPlayer: 0,\n    // Start with player 0\n    status: 'initialize',\n    // Initial status for game setup\n    isWinning: false,\n    // Flag to track if winning condition is met\n    message: \"\" // Game state message\n  };\n\n  // State hooks for managing game state\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedPiece, setSelectedPiece] = useState(null); // Track selected piece\n  const [gameStarted, setGameStarted] = useState(false); // Flag to track if the game has started\n\n  /**\r\n   * Function to handle passing an action.\r\n   * Sends a request to pass the current action and updates the game state.\r\n   */\n  const handlePassAction = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/passAction?`);\n      await checkAndSetResponse(response);\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  };\n\n  /**\r\n   * Handle clicks on cells in the game grid.\r\n   * Depending on the game state, different actions are triggered (initialize, move, build).\r\n   */\n  const handleCellClick = async (x, y) => {\n    console.log(`Cell clicked: (${x}, ${y})`);\n    try {\n      // No action if the game is over\n      if (gameState.isWinning) {\n        return;\n      }\n      if (selectedPiece === null) {\n        // Perform build action if status is build\n        if (gameState.status === 'build') {\n          const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\n          await checkAndSetResponse(response);\n        } else {\n          // set the selected cell, which will be highlighted\n          setSelectedPiece({\n            x,\n            y\n          });\n        }\n      } else {\n        // Coordinates of the previously selected piece\n        let x1 = selectedPiece.x;\n        let y1 = selectedPiece.y;\n        // Perform actions based on the game's current status\n        if (gameState.status === 'initialize') {\n          // Initialize worker positions on the board\n          const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        } else if (gameState.status === 'move') {\n          // Move worker from selected position to clicked position\n          const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  };\n\n  /**\r\n   * Starts a new game.\r\n   * Resets the game state and fetches the initial state from the server.\r\n   */\n  const newGame = async () => {\n    // Set the game as started and reset god cards state\n    setGameStarted(true);\n\n    // Fetch the initial game state from the server\n    const response = await fetch(`http://localhost:8080/api/newGame`);\n    await checkAndSetResponse(response);\n  };\n\n  /**\r\n   * Helper function to check the server response and update the game state.\r\n   */\n  const checkAndSetResponse = async response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    // If the response is OK, parse it as JSON which returns the new game state\n    const newGameState = await response.json();\n    setGameState(newGameState); // Update game state with response data\n    setSelectedPiece(null); // Reset selected piece after state update\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGame,\n      className: \"new-game-button\",\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameState.grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row.map((grid, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          grid: grid,\n          onCellClick: handleCellClick,\n          x: rowIndex,\n          y: colIndex,\n          className: selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-cell' : ''\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 27\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-state-message\",\n      children: 'Message: ' + gameState.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"qwFjetiP4pBMxKh8Vwitm/pJkX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","GameState","Cell","jsxDEV","_jsxDEV","App","_s","initialGrid","Array","from","length","height","hasDome","occupyStatus","initialGameState","grid","currentPlayer","status","isWinning","message","gameState","setGameState","selectedPiece","setSelectedPiece","gameStarted","setGameStarted","handlePassAction","response","fetch","checkAndSetResponse","error","console","handleCellClick","x","y","log","x1","y1","newGame","ok","Error","newGameState","json","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","colIndex","onCellClick","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {GameState} from './game.tsx';\r\nimport {Grid, Cell} from './Cell.tsx'\r\nimport './App.css';\r\n\r\n/**\r\n * GameState interface defines the structure of the overall state of the game.\r\n * It includes properties that represent the current state of the game.\r\n */\r\ninterface GameState {\r\n    grid: Grid[][]; // A 2D array representing the game grid, where each cell is represented by CellData.\r\n    currentPlayer: number; // The ID of the current player, 0 or 1.\r\n    status: string; // A string representing the current status of the game.\r\n    isWinning: boolean; // A boolean indicating whether a winning condition has been met.\r\n    message: string; // A messages about the game state.\r\n}\r\n\r\n/**\r\n * The main React functional component for the board game.\r\n * It handles the game state, player actions, and rendering of the game board.\r\n * The component manages the initialization, movement, and building actions,\r\n * as well as the handling and selection of god cards.\r\n */\r\nconst App: React.FC = () => {\r\n    /**\r\n     * Initialize the game grid with a default structure for each cell.\r\n     * Cells have properties: level, dome status, and occupation status.\r\n     */\r\n    const initialGrid: Grid[][] = Array.from({ length: 5 }, () =>\r\n        Array.from({ length: 5 }, () => ({\r\n            height: 0, // Initial level of construction\r\n            hasDome: false, // Dome status, false initially\r\n            occupyStatus: -1, // 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\r\n        }))\r\n    );\r\n\r\n    /**\r\n     * Set up the initial game state with default values.\r\n     * Includes grid, current player, game status, winning condition, and message.\r\n     */\r\n    const initialGameState: GameState = {\r\n        grid: initialGrid,\r\n        currentPlayer: 0, // Start with player 0\r\n        status: 'initialize', // Initial status for game setup\r\n        isWinning: false, // Flag to track if winning condition is met\r\n        message: \"\" // Game state message\r\n    };\r\n\r\n    // State hooks for managing game state\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null); // Track selected piece\r\n    const [gameStarted, setGameStarted] = useState<boolean>(false); // Flag to track if the game has started\r\n  \r\n\r\n    /**\r\n     * Function to handle passing an action.\r\n     * Sends a request to pass the current action and updates the game state.\r\n     */\r\n    const handlePassAction = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/passAction?`);\r\n            await checkAndSetResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Handle clicks on cells in the game grid.\r\n     * Depending on the game state, different actions are triggered (initialize, move, build).\r\n     */\r\n    const handleCellClick = async (x: number, y: number) => {\r\n        console.log(`Cell clicked: (${x}, ${y})`);\r\n        try {\r\n            // No action if the game is over\r\n            if (gameState.isWinning) {\r\n                return;\r\n            }\r\n\r\n            if (selectedPiece === null) {\r\n                // Perform build action if status is build\r\n                if (gameState.status === 'build') {\r\n                    const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else {\r\n                    // set the selected cell, which will be highlighted\r\n                    setSelectedPiece({x, y});\r\n                }\r\n            } else {\r\n                // Coordinates of the previously selected piece\r\n                let x1: number = selectedPiece.x;\r\n                let y1: number = selectedPiece.y;\r\n                // Perform actions based on the game's current status\r\n                if(gameState.status === 'initialize') {\r\n                    // Initialize worker positions on the board\r\n                    const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else if (gameState.status === 'move') {\r\n                    // Move worker from selected position to clicked position\r\n                    const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Starts a new game.\r\n     * Resets the game state and fetches the initial state from the server.\r\n     */\r\n    const newGame = async () => {\r\n        // Set the game as started and reset god cards state\r\n        setGameStarted(true)\r\n\r\n        // Fetch the initial game state from the server\r\n        const response = await fetch(`http://localhost:8080/api/newGame`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n    /**\r\n     * Helper function to check the server response and update the game state.\r\n     */\r\n    const checkAndSetResponse = async (response: Response) => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        // If the response is OK, parse it as JSON which returns the new game state\r\n        const newGameState: GameState = await response.json();\r\n        setGameState(newGameState); // Update game state with response data\r\n        setSelectedPiece(null); // Reset selected piece after state update\r\n    };\r\n\r\n    return (\r\n      <div>\r\n          <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n          <div className=\"game-board\">\r\n              {gameState.grid.map((row, rowIndex) => (\r\n                  <div key={rowIndex} className=\"board-row\">\r\n                      {row.map((grid, colIndex) => (\r\n                          <Cell\r\n                              key={`${rowIndex}-${colIndex}`}\r\n                              grid={grid}\r\n                              onCellClick={handleCellClick}\r\n                              x={rowIndex}\r\n                              y={colIndex}\r\n                              className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-cell' : ''}\r\n                          />\r\n                      ))}\r\n                  </div>\r\n              ))}\r\n          </div>\r\n          <div className=\"game-state-message\">\r\n              {'Message: ' + gameState.message}\r\n          </div>\r\n          <div className=\"game-info\">\r\n              {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}