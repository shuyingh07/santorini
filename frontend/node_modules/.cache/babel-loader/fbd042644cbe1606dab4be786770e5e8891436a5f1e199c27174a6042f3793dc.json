{"ast":null,"code":"import React,{useState}from'react';import{Cell}from'./Cell.tsx';import'./App.css';/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */const App=()=>{/**\r\n     * Function to create the initial game grid.\r\n     * @param size Size of the grid (default is 5x5)\r\n     * @returns Initial grid for the game board\r\n     */function createInitialGrid(){let size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;return Array.from({length:size},()=>Array.from({length:size},()=>({height:0,hasDome:false,occupyStatus:-1})));}// Initialize the game grid\nconst initialGrid=createInitialGrid();/// Set up the initial game state\nconst initialGameState={grid:initialGrid,currentPlayer:0,status:'initialize',isWinning:false,message:\"\"};// State hooks for managing game state\nconst[gameState,setGameState]=useState(initialGameState);const[selectedPiece,setSelectedPiece]=useState(null);/**\r\n     * Handle clicks on cells in the game grid.\r\n     * @param x X-coordinate of the clicked cell\r\n     * @param y Y-coordinate of the clicked cell\r\n     */const handleCellClick=async(x,y)=>{console.log(\"Cell clicked: (\".concat(x,\", \").concat(y,\")\"));try{// No action if the game has a winner\nif(gameState.isWinning){return;}if(selectedPiece===null){if(gameState.status==='build'){const response=await fetch(\"http://localhost:8080/build?x1=\".concat(x,\"&y1=\").concat(y));await checkAndSetResponse(response);}else{setSelectedPiece({x,y});}}else{let x1=selectedPiece.x;let y1=selectedPiece.y;if(gameState.status==='initialize'){const response=await fetch(\"http://localhost:8080/initialize?x1=\".concat(x1,\"&y1=\").concat(y1,\"&x2=\").concat(x,\"&y2=\").concat(y));await checkAndSetResponse(response);}else if(gameState.status==='move'){const response=await fetch(\"http://localhost:8080/move?x1=\".concat(x1,\"&y1=\").concat(y1,\"&x2=\").concat(x,\"&y2=\").concat(y));await checkAndSetResponse(response);}}}catch(error){console.error('Error fetching data: ',error);}};/**\r\n     * Starts a new game by resetting the game state.\r\n     */const newGame=async()=>{const response=await fetch(\"http://localhost:8080/newGame\");await checkAndSetResponse(response);};/**\r\n     * Helper function to check the server response and update the game state.\r\n     * @param response Response from the server\r\n     */const checkAndSetResponse=async response=>{if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const newGameState=await response.json();setGameState(newGameState);setSelectedPiece(null);};return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{width:'200px',padding:'10px',backgroundColor:'#f0f0f0',borderRight:'1px solid #ccc'},children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Tips\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'yellow',fontWeight:'bold'},children:\"Yellow:\"}),\" Player1\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'lightblue',fontWeight:'bold'},children:\"Blue:\"}),\" Player2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'purple',fontWeight:'bold'},children:\"Purple:\"}),\" Selected Grid\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{flexGrow:1},children:[/*#__PURE__*/_jsx(\"button\",{onClick:newGame,className:\"new-game-button\",children:\"New Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:gameState.grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((grid,colIndex)=>/*#__PURE__*/_jsx(Cell,{grid:grid,onCellClick:handleCellClick,x:rowIndex,y:colIndex,className:selectedPiece&&selectedPiece.x===rowIndex&&selectedPiece.y===colIndex?'selected-grid':''},\"\".concat(rowIndex,\"-\").concat(colIndex)))},rowIndex))}),/*#__PURE__*/_jsx(\"div\",{className:\"game-state-message\",children:'Message: '+gameState.message}),/*#__PURE__*/_jsx(\"div\",{className:\"game-info\",children:gameState.isWinning?\"Player \".concat(gameState.currentPlayer,\" wins!\"):\"Player \".concat(gameState.currentPlayer,\"'s Turn, Status: \").concat(gameState.status)})]})]});};export default App;","map":{"version":3,"names":["React","useState","Cell","jsx","_jsx","jsxs","_jsxs","App","createInitialGrid","size","arguments","length","undefined","Array","from","height","hasDome","occupyStatus","initialGrid","initialGameState","grid","currentPlayer","status","isWinning","message","gameState","setGameState","selectedPiece","setSelectedPiece","handleCellClick","x","y","console","log","concat","response","fetch","checkAndSetResponse","x1","y1","error","newGame","ok","Error","newGameState","json","style","display","flexDirection","children","width","padding","backgroundColor","borderRight","color","fontWeight","flexGrow","onClick","className","map","row","rowIndex","colIndex","onCellClick"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {Grid, Cell} from './Cell.tsx'\r\nimport './App.css';\r\n\r\n/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */\r\ninterface GameState {\r\n    grid: Grid[][];\r\n    currentPlayer: number;\r\n    status: string;\r\n    isWinning: boolean;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */\r\nconst App: React.FC = () => {\r\n    /**\r\n     * Function to create the initial game grid.\r\n     * @param size Size of the grid (default is 5x5)\r\n     * @returns Initial grid for the game board\r\n     */\r\n    function createInitialGrid(size = 5): Grid[][] {\r\n        return Array.from({ length: size }, () =>\r\n            Array.from({ length: size }, () => ({\r\n                height: 0,\r\n                hasDome: false,\r\n                occupyStatus: -1,\r\n            }))\r\n        );\r\n    }\r\n    \r\n    \r\n    // Initialize the game grid\r\n    const initialGrid: Grid[][] = createInitialGrid();\r\n\r\n    /// Set up the initial game state\r\n    const initialGameState: GameState = {\r\n        grid: initialGrid,\r\n        currentPlayer: 0, \r\n        status: 'initialize',\r\n        isWinning: false,\r\n        message: \"\" \r\n    };\r\n\r\n    // State hooks for managing game state\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null);\r\n\r\n\r\n    /**\r\n     * Handle clicks on cells in the game grid.\r\n     * @param x X-coordinate of the clicked cell\r\n     * @param y Y-coordinate of the clicked cell\r\n     */\r\n    const handleCellClick = async (x: number, y: number) => {\r\n        console.log(`Cell clicked: (${x}, ${y})`);\r\n        try {\r\n            // No action if the game has a winner\r\n            if (gameState.isWinning) {\r\n                return;\r\n            }\r\n\r\n            if (selectedPiece === null) {\r\n                if (gameState.status === 'build') {\r\n                    const response = await fetch(`http://localhost:8080/build?x1=${x}&y1=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else {\r\n                    setSelectedPiece({x, y});\r\n                }\r\n            } else {\r\n                let x1: number = selectedPiece.x;\r\n                let y1: number = selectedPiece.y;\r\n                if(gameState.status === 'initialize') {\r\n                    const response = await fetch(`http://localhost:8080/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else if (gameState.status === 'move') {\r\n                    const response = await fetch(`http://localhost:8080/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Starts a new game by resetting the game state.\r\n     */\r\n    const newGame = async () => {\r\n\r\n        const response = await fetch(`http://localhost:8080/newGame`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n    /**\r\n     * Helper function to check the server response and update the game state.\r\n     * @param response Response from the server\r\n     */\r\n    const checkAndSetResponse = async (response: Response) => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const newGameState: GameState = await response.json();\r\n        setGameState(newGameState);\r\n        setSelectedPiece(null);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <div style={{ width: '200px', padding: '10px', backgroundColor: '#f0f0f0', borderRight: '1px solid #ccc' }}>\r\n                <h4>Tips</h4>\r\n                <p><span style={{ color: 'yellow', fontWeight: 'bold' }}>Yellow:</span> Player1</p>\r\n                <p><span style={{ color: 'lightblue', fontWeight: 'bold' }}>Blue:</span> Player2</p>\r\n                <p><span style={{ color: 'purple', fontWeight: 'bold' }}>Purple:</span> Selected Grid</p>\r\n            </div>\r\n            <div style={{ flexGrow: 1 }}>\r\n                <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n                <div className=\"game-board\">\r\n                    {gameState.grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className=\"board-row\">\r\n                            {row.map((grid, colIndex) => (\r\n                                <Cell\r\n                                    key={`${rowIndex}-${colIndex}`}\r\n                                    grid={grid}\r\n                                    onCellClick={handleCellClick}\r\n                                    x={rowIndex}\r\n                                    y={colIndex}\r\n                                    className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-grid' : ''}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"game-state-message\">\r\n                    {'Message: ' + gameState.message}\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}