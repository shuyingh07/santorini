{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const initialBoard = Array.from({\n    length: 5\n  }, () => Array(5).fill(null));\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [playerStatus, setPlayerStatus] = useState(0); // 0 for init, 1 for move\n\n  const handleCellClick = (x, y) => {\n    if (selectedCells.length < 2) {\n      setSelectedCells(prev => [...prev, {\n        x,\n        y\n      }]);\n    } else {\n      // Reset if already 2 selections are made, for next action\n      setSelectedCells([{\n        x,\n        y\n      }]);\n    }\n  };\n  useEffect(() => {\n    if (selectedCells.length === 2) {\n      const [cell1, cell2] = selectedCells;\n      let url;\n      let method = \"GET\"; // Default to GET for simplicity\n      let headers = {};\n      let body = null;\n      if (playerStatus === 0) {\n        // initWorker case\n        url = `http://localhost:8080/initWorker`;\n        method = \"POST\";\n        headers = {\n          'Content-Type': 'application/json'\n        };\n        body = JSON.stringify({\n          worker1X: cell1.x,\n          worker1Y: cell1.y,\n          worker2X: cell2.x,\n          worker2Y: cell2.y\n        });\n      } else if (playerStatus === 1) {\n        // move case\n        url = `http://localhost:8080/move`;\n        method = \"POST\";\n        headers = {\n          'Content-Type': 'application/json'\n        };\n        body = JSON.stringify({\n          worker1X: cell1.x,\n          worker1Y: cell1.y,\n          targetX: cell2.x,\n          targetY: cell2.y\n        });\n      }\n      fetch(url, {\n        method,\n        headers,\n        body: body\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        return response.json();\n      }).then(data => {\n        console.log(data); // For debugging\n        if (data.gameStatus === \"initialize\" || data.gameStatus === \"play\") {\n          const color = data.playerId === 0 ? 'yellow' : 'blue';\n          setBoard(currentBoard => currentBoard.map((row, rowIndex) => row.map((cell, cellIndex) => rowIndex === cell1.x && cellIndex === cell1.y || rowIndex === cell2.x && cellIndex === cell2.y ? color : cell)));\n          setSelectedCells([]); // Reset for next action\n          if (data.gameStatus === \"play\") {\n            setPlayerStatus(1); // Change status to move after both players have initialized\n          }\n        } else {\n          // Handle error or other game statuses\n          console.error(\"Unhandled game status\", data.gameStatus);\n        }\n      }).catch(error => console.error('Error:', error));\n    }\n  }, [selectedCells, playerStatus]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        style: {\n          backgroundColor: cell || 'white'\n        },\n        onClick: () => handleCellClick(rowIndex, cellIndex)\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4YNBy5Fw5eg9bTqlxi811/OOEgQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","initialBoard","Array","from","length","fill","board","setBoard","selectedCells","setSelectedCells","playerStatus","setPlayerStatus","handleCellClick","x","y","prev","cell1","cell2","url","method","headers","body","JSON","stringify","worker1X","worker1Y","worker2X","worker2Y","targetX","targetY","fetch","then","response","ok","Error","json","data","console","log","gameStatus","color","playerId","currentBoard","map","row","rowIndex","cell","cellIndex","error","catch","className","children","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\ninterface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst App = () => {\r\n  const initialBoard = Array.from({ length: 5 }, () => Array(5).fill(null));\r\n  const [board, setBoard] = useState<string[][]>(initialBoard);\r\n  const [selectedCells, setSelectedCells] = useState<CellPosition[]>([]);\r\n  const [playerStatus, setPlayerStatus] = useState<number>(0); // 0 for init, 1 for move\r\n\r\n  const handleCellClick = (x: number, y: number) => {\r\n    if (selectedCells.length < 2) {\r\n      setSelectedCells(prev => [...prev, { x, y }]);\r\n    } else {\r\n      // Reset if already 2 selections are made, for next action\r\n      setSelectedCells([{ x, y }]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedCells.length === 2) {\r\n      const [cell1, cell2] = selectedCells;\r\n      let url;\r\n      let method = \"GET\"; // Default to GET for simplicity\r\n      let headers = {};\r\n      let body = null;\r\n\r\n      if (playerStatus === 0) { // initWorker case\r\n        url = `http://localhost:8080/initWorker`;\r\n        method = \"POST\";\r\n        headers = { 'Content-Type': 'application/json' };\r\n        body = JSON.stringify({\r\n          worker1X: cell1.x,\r\n          worker1Y: cell1.y,\r\n          worker2X: cell2.x,\r\n          worker2Y: cell2.y,\r\n        });\r\n      } else if (playerStatus === 1) { // move case\r\n        url = `http://localhost:8080/move`;\r\n        method = \"POST\";\r\n        headers = { 'Content-Type': 'application/json' };\r\n        body = JSON.stringify({\r\n          worker1X: cell1.x,\r\n          worker1Y: cell1.y,\r\n          targetX: cell2.x,\r\n          targetY: cell2.y,\r\n        });\r\n      }\r\n\r\n      fetch(url, { method, headers, body: body })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok.');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          console.log(data); // For debugging\r\n          if (data.gameStatus === \"initialize\" || data.gameStatus === \"play\") {\r\n            const color = data.playerId === 0 ? 'yellow' : 'blue';\r\n            setBoard(currentBoard => \r\n              currentBoard.map((row, rowIndex) => \r\n                row.map((cell, cellIndex) => \r\n                  ((rowIndex === cell1.x && cellIndex === cell1.y) || (rowIndex === cell2.x && cellIndex === cell2.y)) ? color : cell\r\n                )\r\n              )\r\n            );\r\n            setSelectedCells([]); // Reset for next action\r\n            if (data.gameStatus === \"play\") {\r\n              setPlayerStatus(1); // Change status to move after both players have initialized\r\n            }\r\n          } else {\r\n            // Handle error or other game statuses\r\n            console.error(\"Unhandled game status\", data.gameStatus);\r\n          }\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedCells, playerStatus]);\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => (\r\n            <div key={cellIndex} className=\"cell\" style={{ backgroundColor: cell || 'white' }} onClick={() => handleCellClick(rowIndex, cellIndex)}></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}