{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Cell } from './Cell.tsx';\nimport './App.css';\n\n/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */\nconst App = () => {\n  _s();\n  /**\r\n   * Function to create the initial game grid.\r\n   * @param size Size of the grid (default is 5x5)\r\n   * @returns Initial grid for the game board\r\n   */\n  function createInitialGrid(size = 5) {\n    return Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      height: 0,\n      hasDome: false,\n      occupyStatus: -1\n    })));\n  }\n\n  // Initialize the game grid\n  const initialGrid = createInitialGrid();\n\n  /// Set up the initial game state\n  const initialGameState = {\n    grid: initialGrid,\n    currentPlayer: 0,\n    status: 'initialize',\n    isWinning: false,\n    message: \"\"\n  };\n\n  // State hooks for managing game state\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n\n  // 新添加的状态：是否使用神卡，选择的神卡列表\n  const [useGodCards, setUseGodCards] = useState(false); // 是否使用神卡\n  const [godCards, setGodCards] = useState([]); // 已选择的神卡列表\n  const [gameStarted, setGameStarted] = useState(false);\n\n  /**\r\n   * Handle clicks on cells in the game grid.\r\n   * @param x X-coordinate of the clicked cell\r\n   * @param y Y-coordinate of the clicked cell\r\n   */\n  const handleCellClick = async (x, y) => {\n    console.log(`Cell clicked: (${x}, ${y})`);\n    try {\n      // No action if the game has a winner\n      if (gameState.isWinning) {\n        return;\n      }\n      if (selectedPiece === null) {\n        if (gameState.status === 'build') {\n          const response = await fetch(`http://localhost:8080/build?x1=${x}&y1=${y}`);\n          await checkAndSetResponse(response);\n        } else {\n          setSelectedPiece({\n            x,\n            y\n          });\n        }\n      } else {\n        let x1 = selectedPiece.x;\n        let y1 = selectedPiece.y;\n        if (gameState.status === 'initialize') {\n          const response = await fetch(`http://localhost:8080/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        } else if (gameState.status === 'move') {\n          const response = await fetch(`http://localhost:8080/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  };\n\n  // 更新神卡使用的状态\n  const handleUseGodCards = value => {\n    if (!gameStarted) {\n      setUseGodCards(value);\n      if (!value) {\n        setGodCards([]);\n      }\n    }\n  };\n\n  // 选择神卡\n  const handleSelectGodCard = async godCardName => {\n    if (useGodCards && godCards.length < 2) {\n      // Ensure god cards can be selected if enabled and less than two are selected\n      console.log(\"Selected God Card:\", godCardName);\n      setGodCards(prev => {\n        // Prevent selecting more than two god cards and the same god card twice\n        if (prev.includes(godCardName) || prev.length >= 2) {\n          return prev;\n        }\n        return [...prev, godCardName];\n      });\n      if (godCards.length + 1 === 2) {\n        // Check if this selection makes two selected god cards\n        const response = await fetch(`http://localhost:8080/setGodClass?godCard=${godCardName}`);\n        await checkAndSetResponse(response);\n      }\n    }\n  };\n\n  // 放弃额外行动\n  const handlePassAction = async () => {\n    const response = await fetch(`http://localhost:8080/passAction`);\n    await checkAndSetResponse(response);\n  };\n\n  /**\r\n   * Starts a new game by resetting the game state.\r\n   */\n  const newGame = async () => {\n    setGameState(initialGameState);\n    setSelectedPiece(null);\n    setGodCards([]); // 重置已选择的神卡列表\n    setUseGodCards(false); // 重置神卡使用状态\n    setGameStarted(false);\n    const response = await fetch(`http://localhost:8080/newGame`);\n    await checkAndSetResponse(response);\n  };\n\n  /**\r\n   * Helper function to check the server response and update the game state.\r\n   * @param response Response from the server\r\n   */\n  const checkAndSetResponse = async response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const newGameState = await response.json();\n    setGameState(newGameState);\n    setSelectedPiece(null);\n    setGameStarted(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '200px',\n        padding: '10px',\n        backgroundColor: '#f0f0f0',\n        borderRight: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Tips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'yellow',\n            fontWeight: 'bold'\n          },\n          children: \"Yellow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 20\n        }, this), \" Player1\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'lightblue',\n            fontWeight: 'bold'\n          },\n          children: \"Blue:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 20\n        }, this), \" Player2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'purple',\n            fontWeight: 'bold'\n          },\n          children: \"Purple:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 20\n        }, this), \" Selected Grid\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newGame,\n        className: \"new-game-button\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUseGodCards(true),\n        disabled: gameStarted,\n        className: \"use-god-card-button\",\n        children: \"Enable God Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleUseGodCards(false),\n        disabled: gameStarted,\n        className: \"use-god-card-button\",\n        children: \"Disable God Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), useGodCards && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectGodCard('Demeter'),\n          disabled: godCards.length >= 2,\n          className: \"god-card-button\",\n          children: \"Demeter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectGodCard('Pan'),\n          disabled: godCards.length >= 2,\n          className: \"god-card-button\",\n          children: \"Pan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectGodCard('Hephaestus'),\n          disabled: godCards.length >= 2,\n          className: \"god-card-button\",\n          children: \"Hephaestus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectGodCard('Minotaur'),\n          disabled: godCards.length >= 2,\n          className: \"god-card-button\",\n          children: \"Minotaur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: gameState.grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            grid: cell,\n            onCellClick: () => handleCellClick(rowIndex, colIndex),\n            x: rowIndex,\n            y: colIndex,\n            className: selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-grid' : ''\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-state-message\",\n        children: 'Message: ' + gameState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"7gV4Pu6qSHs/RDR0N/rc10I+hZ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","App","_s","createInitialGrid","size","Array","from","length","height","hasDome","occupyStatus","initialGrid","initialGameState","grid","currentPlayer","status","isWinning","message","gameState","setGameState","selectedPiece","setSelectedPiece","useGodCards","setUseGodCards","godCards","setGodCards","gameStarted","setGameStarted","handleCellClick","x","y","console","log","response","fetch","checkAndSetResponse","x1","y1","error","handleUseGodCards","value","handleSelectGodCard","godCardName","prev","includes","handlePassAction","newGame","ok","Error","newGameState","json","style","display","flexDirection","children","width","padding","backgroundColor","borderRight","fileName","_jsxFileName","lineNumber","columnNumber","color","fontWeight","flexGrow","onClick","className","disabled","map","row","rowIndex","cell","colIndex","onCellClick","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {Grid, Cell} from './Cell.tsx'\r\nimport './App.css';\r\n\r\n/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */\r\ninterface GameState {\r\n    grid: Grid[][];\r\n    currentPlayer: number;\r\n    status: string;\r\n    isWinning: boolean;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */\r\nconst App: React.FC = () => {\r\n    /**\r\n     * Function to create the initial game grid.\r\n     * @param size Size of the grid (default is 5x5)\r\n     * @returns Initial grid for the game board\r\n     */\r\n    function createInitialGrid(size = 5): Grid[][] {\r\n        return Array.from({ length: size }, () =>\r\n            Array.from({ length: size }, () => ({\r\n                height: 0,\r\n                hasDome: false,\r\n                occupyStatus: -1,\r\n            }))\r\n        );\r\n    }\r\n    \r\n    \r\n    // Initialize the game grid\r\n    const initialGrid: Grid[][] = createInitialGrid();\r\n\r\n    /// Set up the initial game state\r\n    const initialGameState: GameState = {\r\n        grid: initialGrid,\r\n        currentPlayer: 0, \r\n        status: 'initialize',\r\n        isWinning: false,\r\n        message: \"\" \r\n    };\r\n\r\n    // State hooks for managing game state\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null);\r\n\r\n    // 新添加的状态：是否使用神卡，选择的神卡列表\r\n    const [useGodCards, setUseGodCards] = useState(false);  // 是否使用神卡\r\n    const [godCards, setGodCards] = useState<string[]>([]);  // 已选择的神卡列表\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n\r\n    /**\r\n     * Handle clicks on cells in the game grid.\r\n     * @param x X-coordinate of the clicked cell\r\n     * @param y Y-coordinate of the clicked cell\r\n     */\r\n    const handleCellClick = async (x: number, y: number) => {\r\n        console.log(`Cell clicked: (${x}, ${y})`);\r\n        try {\r\n            // No action if the game has a winner\r\n            if (gameState.isWinning) {\r\n                return;\r\n            }\r\n\r\n            if (selectedPiece === null) {\r\n                if (gameState.status === 'build') {\r\n                    const response = await fetch(`http://localhost:8080/build?x1=${x}&y1=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else {\r\n                    setSelectedPiece({x, y});\r\n                }\r\n            } else {\r\n                let x1: number = selectedPiece.x;\r\n                let y1: number = selectedPiece.y;\r\n                if(gameState.status === 'initialize') {\r\n                    const response = await fetch(`http://localhost:8080/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else if (gameState.status === 'move') {\r\n                    const response = await fetch(`http://localhost:8080/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n    // 更新神卡使用的状态\r\n    const handleUseGodCards = (value: boolean) => {\r\n        if (!gameStarted) {\r\n            setUseGodCards(value);\r\n            if (!value) {\r\n                setGodCards([]);\r\n            }\r\n        }\r\n    };\r\n\r\n    // 选择神卡\r\n    const handleSelectGodCard = async (godCardName: string) => {\r\n        if (useGodCards && godCards.length < 2) {  // Ensure god cards can be selected if enabled and less than two are selected\r\n            console.log(\"Selected God Card:\", godCardName);\r\n            setGodCards(prev => {\r\n                // Prevent selecting more than two god cards and the same god card twice\r\n                if (prev.includes(godCardName) || prev.length >= 2) {\r\n                    return prev;\r\n                }\r\n                return [...prev, godCardName];\r\n            });\r\n            if (godCards.length + 1 === 2) {  // Check if this selection makes two selected god cards\r\n                const response = await fetch(`http://localhost:8080/setGodClass?godCard=${godCardName}`);\r\n                await checkAndSetResponse(response);\r\n            }\r\n        }\r\n    };\r\n\r\n    // 放弃额外行动\r\n    const handlePassAction = async () => {\r\n        const response = await fetch(`http://localhost:8080/passAction`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n\r\n    /**\r\n     * Starts a new game by resetting the game state.\r\n     */\r\n    const newGame = async () => {\r\n\r\n        setGameState(initialGameState);\r\n        setSelectedPiece(null);\r\n        setGodCards([]);  // 重置已选择的神卡列表\r\n        setUseGodCards(false);  // 重置神卡使用状态\r\n        setGameStarted(false);\r\n        const response = await fetch(`http://localhost:8080/newGame`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n    /**\r\n     * Helper function to check the server response and update the game state.\r\n     * @param response Response from the server\r\n     */\r\n    const checkAndSetResponse = async (response: Response) => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const newGameState: GameState = await response.json();\r\n        setGameState(newGameState);\r\n        setSelectedPiece(null);\r\n        setGameStarted(true);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <div style={{ width: '200px', padding: '10px', backgroundColor: '#f0f0f0', borderRight: '1px solid #ccc' }}>\r\n                <h4>Tips</h4>\r\n                <p><span style={{ color: 'yellow', fontWeight: 'bold' }}>Yellow:</span> Player1</p>\r\n                <p><span style={{ color: 'lightblue', fontWeight: 'bold' }}>Blue:</span> Player2</p>\r\n                <p><span style={{ color: 'purple', fontWeight: 'bold' }}>Purple:</span> Selected Grid</p>\r\n            </div>\r\n            <div style={{ flexGrow: 1 }}>\r\n                <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n                <button onClick={() => handleUseGodCards(true)} disabled={gameStarted} className=\"use-god-card-button\">\r\n                    Enable God Cards\r\n                </button>\r\n                <button onClick={() => handleUseGodCards(false)} disabled={gameStarted} className=\"use-god-card-button\">\r\n                    Disable God Cards\r\n                </button>\r\n                {useGodCards && (\r\n                    <div>\r\n                        <button onClick={() => handleSelectGodCard('Demeter')} disabled={godCards.length >= 2} className=\"god-card-button\">Demeter</button>\r\n                        <button onClick={() => handleSelectGodCard('Pan')} disabled={godCards.length >= 2} className=\"god-card-button\">Pan</button>\r\n                        <button onClick={() => handleSelectGodCard('Hephaestus')} disabled={godCards.length >= 2} className=\"god-card-button\">Hephaestus</button>\r\n                        <button onClick={() => handleSelectGodCard('Minotaur')} disabled={godCards.length >= 2} className=\"god-card-button\">Minotaur</button>\r\n                    </div>\r\n                )}\r\n                <div className=\"game-board\">\r\n                    {gameState.grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className=\"board-row\">\r\n                            {row.map((cell, colIndex) => (\r\n                                <Cell\r\n                                    key={`${rowIndex}-${colIndex}`}\r\n                                    grid={cell}\r\n                                    onCellClick={() => handleCellClick(rowIndex, colIndex)}\r\n                                    x={rowIndex}\r\n                                    y={colIndex}\r\n                                    className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-grid' : ''}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"game-state-message\">{'Message: ' + gameState.message}</div>\r\n                <div className=\"game-info\">\r\n                    {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}