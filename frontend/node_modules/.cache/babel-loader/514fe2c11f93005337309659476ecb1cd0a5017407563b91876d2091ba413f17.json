{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const initialBoard = Array.from({\n    length: 5\n  }, () => Array(5).fill(null));\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [playerStatus, setPlayerStatus] = useState(0);\n  const handleCellClick = (x, y) => {\n    if (selectedCells.length < 2) {\n      setSelectedCells(prev => [...prev, {\n        x,\n        y\n      }]);\n    }\n  };\n  useEffect(() => {\n    // 确保在玩家状态为1（build）且选中了两个格子时才发送请求\n    if (selectedCells.length === 2 && playerStatus === 0 || selectedCells.length === 2 && playerStatus === 1) {\n      const [cell1, cell2] = selectedCells;\n      let url;\n      if (playerStatus === 0) {\n        // 初始化工人\n        url = `http://localhost:8080/initWorker?worker1X=${cell1.x}&worker1Y=${cell1.y}&worker2X=${cell2.x}&worker2Y=${cell2.y}`;\n      } else if (playerStatus === 1) {\n        // 移动工人\n        url = `http://localhost:8080/move?worker1X=${cell1.x}&worker1Y=${cell1.y}&targetX=${cell2.x}&targetY=${cell2.y}`;\n      }\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        // 处理响应数据\n        // ...\n        setSelectedCells([]); // 操作完成后清空选择\n      }).catch(error => console.error('Error:', error));\n    }\n  }, [selectedCells, playerStatus]); // 依赖于 selectedCells 和 playerStatus\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        style: {\n          backgroundColor: cell || 'white'\n        },\n        onClick: () => handleCellClick(rowIndex, cellIndex)\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4YNBy5Fw5eg9bTqlxi811/OOEgQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","initialBoard","Array","from","length","fill","board","setBoard","selectedCells","setSelectedCells","playerStatus","setPlayerStatus","handleCellClick","x","y","prev","cell1","cell2","url","fetch","then","response","ok","Error","json","data","catch","error","console","className","children","map","row","rowIndex","cell","cellIndex","style","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\ninterface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst App = () => {\r\n  const initialBoard = Array.from({ length: 5 }, () => Array(5).fill(null));\r\n  const [board, setBoard] = useState<string[][]>(initialBoard);\r\n  const [selectedCells, setSelectedCells] = useState<CellPosition[]>([]);\r\n  const [playerStatus, setPlayerStatus] = useState<number>(0);\r\n  const handleCellClick = (x: number, y: number) => {\r\n    if (selectedCells.length < 2) {\r\n      setSelectedCells(prev => [...prev, { x, y }]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 确保在玩家状态为1（build）且选中了两个格子时才发送请求\r\n    if ((selectedCells.length === 2 && playerStatus === 0) || (selectedCells.length === 2 && playerStatus === 1)) {\r\n      const [cell1, cell2] = selectedCells;\r\n      let url;\r\n      if (playerStatus === 0) { // 初始化工人\r\n        url = `http://localhost:8080/initWorker?worker1X=${cell1.x}&worker1Y=${cell1.y}&worker2X=${cell2.x}&worker2Y=${cell2.y}`;\r\n      } else if (playerStatus === 1) { // 移动工人\r\n        url = `http://localhost:8080/move?worker1X=${cell1.x}&worker1Y=${cell1.y}&targetX=${cell2.x}&targetY=${cell2.y}`;\r\n      }\r\n  \r\n      fetch(url)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          // 处理响应数据\r\n          // ...\r\n          setSelectedCells([]); // 操作完成后清空选择\r\n        })\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n  }, [selectedCells, playerStatus]); // 依赖于 selectedCells 和 playerStatus\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => (\r\n            <div key={cellIndex} className=\"cell\" style={{ backgroundColor: cell || 'white' }} onClick={() => handleCellClick(rowIndex, cellIndex)}></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}