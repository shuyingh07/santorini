{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Cell } from './Cell.tsx';\nimport './App.css';\n\n/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */\nconst App = () => {\n  _s();\n  /**\r\n   * Function to create the initial game grid.\r\n   * @param size Size of the grid (default is 5x5)\r\n   * @returns Initial grid for the game board\r\n   */\n  function createInitialGrid(size = 5) {\n    return Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      height: 0,\n      hasDome: false,\n      occupyStatus: -1\n    })));\n  }\n\n  // Initialize the game grid\n  const initialGrid = createInitialGrid();\n\n  /// Set up the initial game state\n  const initialGameState = {\n    grid: initialGrid,\n    currentPlayer: 0,\n    status: 'initialize',\n    isWinning: false,\n    message: \"\"\n  };\n\n  // State hooks for managing game state\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n\n  /**\r\n   * Handle clicks on cells in the game grid.\r\n   * @param x X-coordinate of the clicked cell\r\n   * @param y Y-coordinate of the clicked cell\r\n   */\n  const handleCellClick = async (x, y) => {\n    console.log(`Cell clicked: (${x}, ${y})`);\n    try {\n      // No action if the game has a winner\n      if (gameState.isWinning) {\n        return;\n      }\n      if (selectedPiece === null) {\n        if (gameState.status === 'build') {\n          const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\n          await checkAndSetResponse(response);\n        } else {\n          setSelectedPiece({\n            x,\n            y\n          });\n        }\n      } else {\n        let x1 = selectedPiece.x;\n        let y1 = selectedPiece.y;\n        if (gameState.status === 'initialize') {\n          const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        } else if (gameState.status === 'move') {\n          const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\n          await checkAndSetResponse(response);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data: ', error);\n    }\n  };\n\n  /**\r\n   * Starts a new game by resetting the game state.\r\n   */\n  const newGame = async () => {\n    setGameStarted(true);\n    const response = await fetch(`http://localhost:8080/api/newGame`);\n    await checkAndSetResponse(response);\n  };\n\n  /**\r\n   * Helper function to check the server response and update the game state.\r\n   * @param response Response from the server\r\n   */\n  const checkAndSetResponse = async response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const newGameState = await response.json();\n    setGameState(newGameState);\n    setSelectedPiece(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '200px',\n        padding: '10px',\n        backgroundColor: '#f0f0f0',\n        borderRight: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Tips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'yellow',\n            fontWeight: 'bold'\n          },\n          children: \"Yellow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 20\n        }, this), \" Player1\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'lightblue',\n            fontWeight: 'bold'\n          },\n          children: \"Blue:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 20\n        }, this), \" Player2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'purple',\n            fontWeight: 'bold'\n          },\n          children: \"Purple:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 20\n        }, this), \" Selected Grid\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newGame,\n        className: \"new-game-button\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: gameState.grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: row.map((grid, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n            grid: grid,\n            onCellClick: handleCellClick,\n            x: rowIndex,\n            y: colIndex,\n            className: selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-grid' : ''\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-state-message\",\n        children: 'Message: ' + gameState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"qwFjetiP4pBMxKh8Vwitm/pJkX8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","App","_s","createInitialGrid","size","Array","from","length","height","hasDome","occupyStatus","initialGrid","initialGameState","grid","currentPlayer","status","isWinning","message","gameState","setGameState","selectedPiece","setSelectedPiece","gameStarted","setGameStarted","handleCellClick","x","y","console","log","response","fetch","checkAndSetResponse","x1","y1","error","newGame","ok","Error","newGameState","json","style","display","flexDirection","children","width","padding","backgroundColor","borderRight","fileName","_jsxFileName","lineNumber","columnNumber","color","fontWeight","flexGrow","onClick","className","map","row","rowIndex","colIndex","onCellClick","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {Grid, Cell} from './Cell.tsx'\r\nimport './App.css';\r\n\r\n/**\r\n * GameState interface defines the useful propoerties of the game.\r\n */\r\ninterface GameState {\r\n    grid: Grid[][];\r\n    currentPlayer: number;\r\n    status: string;\r\n    isWinning: boolean;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Main functional component responsible for managing the game state, player actions, and rendering of the game board.\r\n */\r\nconst App: React.FC = () => {\r\n    /**\r\n     * Function to create the initial game grid.\r\n     * @param size Size of the grid (default is 5x5)\r\n     * @returns Initial grid for the game board\r\n     */\r\n    function createInitialGrid(size = 5): Grid[][] {\r\n        return Array.from({ length: size }, () =>\r\n            Array.from({ length: size }, () => ({\r\n                height: 0,\r\n                hasDome: false,\r\n                occupyStatus: -1,\r\n            }))\r\n        );\r\n    }\r\n    \r\n    \r\n    // Initialize the game grid\r\n    const initialGrid: Grid[][] = createInitialGrid();\r\n\r\n    /// Set up the initial game state\r\n    const initialGameState: GameState = {\r\n        grid: initialGrid,\r\n        currentPlayer: 0, \r\n        status: 'initialize',\r\n        isWinning: false,\r\n        message: \"\" \r\n    };\r\n\r\n    // State hooks for managing game state\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null);\r\n    const [gameStarted, setGameStarted] = useState<boolean>(false);\r\n\r\n\r\n    /**\r\n     * Handle clicks on cells in the game grid.\r\n     * @param x X-coordinate of the clicked cell\r\n     * @param y Y-coordinate of the clicked cell\r\n     */\r\n    const handleCellClick = async (x: number, y: number) => {\r\n        console.log(`Cell clicked: (${x}, ${y})`);\r\n        try {\r\n            // No action if the game has a winner\r\n            if (gameState.isWinning) {\r\n                return;\r\n            }\r\n\r\n            if (selectedPiece === null) {\r\n                if (gameState.status === 'build') {\r\n                    const response = await fetch(`http://localhost:8080/api/build?x1=${x}&y1=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else {\r\n                    setSelectedPiece({x, y});\r\n                }\r\n            } else {\r\n                let x1: number = selectedPiece.x;\r\n                let y1: number = selectedPiece.y;\r\n                if(gameState.status === 'initialize') {\r\n                    const response = await fetch(`http://localhost:8080/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else if (gameState.status === 'move') {\r\n                    const response = await fetch(`http://localhost:8080/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Starts a new game by resetting the game state.\r\n     */\r\n    const newGame = async () => {\r\n        setGameStarted(true)\r\n\r\n        const response = await fetch(`http://localhost:8080/api/newGame`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n    /**\r\n     * Helper function to check the server response and update the game state.\r\n     * @param response Response from the server\r\n     */\r\n    const checkAndSetResponse = async (response: Response) => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const newGameState: GameState = await response.json();\r\n        setGameState(newGameState);\r\n        setSelectedPiece(null);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <div style={{ width: '200px', padding: '10px', backgroundColor: '#f0f0f0', borderRight: '1px solid #ccc' }}>\r\n                <h4>Tips</h4>\r\n                <p><span style={{ color: 'yellow', fontWeight: 'bold' }}>Yellow:</span> Player1</p>\r\n                <p><span style={{ color: 'lightblue', fontWeight: 'bold' }}>Blue:</span> Player2</p>\r\n                <p><span style={{ color: 'purple', fontWeight: 'bold' }}>Purple:</span> Selected Grid</p>\r\n            </div>\r\n            <div style={{ flexGrow: 1 }}>\r\n                <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n                <div className=\"game-board\">\r\n                    {gameState.grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className=\"board-row\">\r\n                            {row.map((grid, colIndex) => (\r\n                                <Cell\r\n                                    key={`${rowIndex}-${colIndex}`}\r\n                                    grid={grid}\r\n                                    onCellClick={handleCellClick}\r\n                                    x={rowIndex}\r\n                                    y={colIndex}\r\n                                    className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-grid' : ''}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"game-state-message\">\r\n                    {'Message: ' + gameState.message}\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}