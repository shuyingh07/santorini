{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\Cell.tsx\";\nimport React from 'react';\n\n/**\n * Grid interface includes the properties to represent the state of a grid in the game.\n */\n\n/**\n * GridInfo interface defines the props that the grid component expects.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * The Cell component represents an individual grid on the game board.\n * It displays the cell's content based on its height, dome status, and occupation.\n * Clicking on the cell triggers an action defined in onCellClick.\n */\nconst Cell = ({\n  grid,\n  onCellClick,\n  x,\n  y,\n  className\n}) => {\n  // Extract height, hasDome, and isOccupied from original grid\n  const {\n    height,\n    hasDome,\n    occupyStatus\n  } = grid;\n\n  /**\n   * Generates the content to be displayed in the cell based on its height, dome, and occupation status.\n   * Workers are represented as 'W0' or 'W1', a dome is represented as 'O',\n   * and the height of the tower is indicated by square brackets around the content.\n   */\n  const generateContent = (height, hasDome, occupyStatus) => {\n    let baseContent = ' ';\n    if (occupyStatus === 0) {\n      baseContent = 'W0'; // Mark the cell as occupied by worker belongs to player 0\n    } else if (occupyStatus === 1) {\n      baseContent = 'W1'; // Mark the cell as occupied by worker belongs to player 1\n    } else if (hasDome) {\n      baseContent = 'O'; // Add a dome symbol if the cell has a dome\n    }\n    // Add brackets to represent the height of the tower\n    for (let i = 0; i < height; i++) {\n      baseContent = '[' + baseContent + ']';\n    }\n    return baseContent;\n  };\n\n  // Generate the content for this cell\n  let content = generateContent(height, hasDome, occupyStatus);\n\n  // Render the cell as a button with the generated content\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    onClick: () => onCellClick(x, y),\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport { Cell };\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Cell","grid","onCellClick","x","y","className","height","hasDome","occupyStatus","generateContent","baseContent","i","content","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/Cell.tsx"],"sourcesContent":["import React from 'react';\n\n/**\n * Grid interface includes the properties to represent the state of a grid in the game.\n */\ninterface Grid {\n    height: number; \n    hasDome: boolean;\n    occupyStatus: number; // Represents occupation status: 0 for player 0, 1 for player 1\n}\n\n/**\n * GridInfo interface defines the props that the grid component expects.\n */\ninterface GridInfo {\n    grid: Grid;\n    onCellClick: (x: number, y: number) => void;\n    x: number;\n    y: number;\n    className?: string;\n}\n\n/**\n * The Cell component represents an individual grid on the game board.\n * It displays the cell's content based on its height, dome status, and occupation.\n * Clicking on the cell triggers an action defined in onCellClick.\n */\nconst Cell: React.FC<GridInfo> = ({ grid, onCellClick, x, y , className}) => {\n    // Extract height, hasDome, and isOccupied from original grid\n    const { height, hasDome, occupyStatus} = grid;\n\n    /**\n     * Generates the content to be displayed in the cell based on its height, dome, and occupation status.\n     * Workers are represented as 'W0' or 'W1', a dome is represented as 'O',\n     * and the height of the tower is indicated by square brackets around the content.\n     */\n    const generateContent = (height: number, hasDome: boolean, occupyStatus: number): string => {\n        let baseContent = ' ';\n        if (occupyStatus === 0) {\n            baseContent = 'W0'; // Mark the cell as occupied by worker belongs to player 0\n        } else if (occupyStatus === 1) {\n            baseContent = 'W1'; // Mark the cell as occupied by worker belongs to player 1\n        } else if (hasDome) {\n            baseContent = 'O'; // Add a dome symbol if the cell has a dome\n        }\n        // Add brackets to represent the height of the tower\n        for (let i = 0; i < height; i++) {\n            baseContent = '[' + baseContent + ']';\n        }\n        return baseContent;\n    };\n\n    // Generate the content for this cell\n    let content = generateContent(height, hasDome, occupyStatus);\n\n    // Render the cell as a button with the generated content\n    return (\n        <button className={className} onClick={() => onCellClick(x, y)}>\n            {content}\n        </button>\n    );\n};\n\nexport { Cell, Grid };"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAOA;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAWA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAwB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,WAAW;EAAEC,CAAC;EAAEC,CAAC;EAAGC;AAAS,CAAC,KAAK;EACzE;EACA,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAY,CAAC,GAAGP,IAAI;;EAE7C;AACJ;AACA;AACA;AACA;EACI,MAAMQ,eAAe,GAAGA,CAACH,MAAc,EAAEC,OAAgB,EAAEC,YAAoB,KAAa;IACxF,IAAIE,WAAW,GAAG,GAAG;IACrB,IAAIF,YAAY,KAAK,CAAC,EAAE;MACpBE,WAAW,GAAG,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM,IAAIF,YAAY,KAAK,CAAC,EAAE;MAC3BE,WAAW,GAAG,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM,IAAIH,OAAO,EAAE;MAChBG,WAAW,GAAG,GAAG,CAAC,CAAC;IACvB;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC7BD,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,GAAG;IACzC;IACA,OAAOA,WAAW;EACtB,CAAC;;EAED;EACA,IAAIE,OAAO,GAAGH,eAAe,CAACH,MAAM,EAAEC,OAAO,EAAEC,YAAY,CAAC;;EAE5D;EACA,oBACIT,OAAA;IAAQM,SAAS,EAAEA,SAAU;IAACQ,OAAO,EAAEA,CAAA,KAAMX,WAAW,CAACC,CAAC,EAAEC,CAAC,CAAE;IAAAU,QAAA,EAC1DF;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEjB,CAAC;AAACC,EAAA,GAlCInB,IAAwB;AAoC9B,SAASA,IAAI;AAAS,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}