{"ast":null,"code":"import React,{useState}from'react';import Cell from'./Cell.tsx';import'./App.css';/**\r\n * The main React functional component for the board game.\r\n * It handles the game state, player actions, and rendering of the game board.\r\n * The component manages the initialization, movement, and building actions,\r\n * as well as the handling and selection of god cards.\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{/**\r\n     * Initialize the game grid with a default structure for each cell.\r\n     * Cells have properties: level, dome status, and occupation status.\r\n     */const initialGrid=Array.from({length:5},()=>Array.from({length:5},()=>({level:0,// Initial level of construction\nhasDome:false,// Dome status, false initially\nisOccupied:2// 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\n})));/**\r\n     * Set up the initial game state with default values.\r\n     * Includes grid, current player, game status, winning condition, and message.\r\n     */const initialGameState={grid:initialGrid,currentPlayer:0,// Start with player 0\nstatus:'initialize',// Initial status for game setup\nisWinning:false,// Flag to track if winning condition is met\nmessage:\"\"// Game state message\n};// State hooks for managing game state\nconst[gameState,setGameState]=useState(initialGameState);const[selectedPiece,setSelectedPiece]=useState(null);// Track selected piece\nconst[gameStarted,setGameStarted]=useState(false);// Flag to track if the game has started\nconst[godCardsSelected,setGodCardsSelected]=useState(0);// Counter for selected god cards\nconst[useGodCards,setUseGodCards]=useState(false);// Flag to indicate god card usage\n/**\r\n     * Function to handle the selection of a god card.\r\n     * Sends a request to the server and updates the game state accordingly.\r\n     */const handleSelectGodCard=async godCardName=>{setGodCardsSelected(godCardsSelected+1);// Increment god card selection counter\ntry{const response=await fetch(\"/api/setGodClass?godCardName=\".concat(godCardName));// Send request to server\nawait checkAndSetResponse(response);// Process response and update state\n}catch(error){console.error('Error fetching data: ',error);// Handle fetch errors\n}};/**\r\n     * Function to handle passing an action.\r\n     * Sends a request to pass the current action and updates the game state.\r\n     */const handlePassAction=async()=>{try{const response=await fetch(\"/api/passAction?\");await checkAndSetResponse(response);}catch(error){console.error('Error fetching data: ',error);}};/**\r\n     * Handle clicks on cells in the game grid.\r\n     * Depending on the game state, different actions are triggered (initialize, move, build).\r\n     */const handleCellClick=async(x,y)=>{console.log(\"Cell clicked: (\".concat(x,\", \").concat(y,\")\"));try{// No action if the game is over\nif(gameState.isWinning){return;}if(selectedPiece===null){// Perform build action if status is build\nif(gameState.status==='build'){const response=await fetch(\"/api/build?x1=\".concat(x,\"&y1=\").concat(y));await checkAndSetResponse(response);}else{// set the selected cell, which will be highlighted\nsetSelectedPiece({x,y});}}else{// Coordinates of the previously selected piece\nlet x1=selectedPiece.x;let y1=selectedPiece.y;// Perform actions based on the game's current status\nif(gameState.status==='initialize'){// Initialize worker positions on the board\nconst response=await fetch(\"/api/initialize?x1=\".concat(x1,\"&y1=\").concat(y1,\"&x2=\").concat(x,\"&y2=\").concat(y));await checkAndSetResponse(response);}else if(gameState.status==='move'){// Move worker from selected position to clicked position\nconst response=await fetch(\"/api/move?x1=\".concat(x1,\"&y1=\").concat(y1,\"&x2=\").concat(x,\"&y2=\").concat(y));await checkAndSetResponse(response);}}}catch(error){console.error('Error fetching data: ',error);}};/**\r\n     * Toggles the use of god cards in the game.\r\n     * Enables or disables the selection of god cards based on player choice.\r\n     */const handleUseGodCards=useGodCards=>{// Update the state to reflect the use or non-use of god cards in this game\nsetUseGodCards(useGodCards);// If god cards are not being used, set selected god cards as 2 to skip god card selection.\nif(!useGodCards){setGodCardsSelected(2);}};/**\r\n     * Starts a new game.\r\n     * Resets the game state and fetches the initial state from the server.\r\n     */const newGame=async()=>{// Set the game as started and reset god cards state\nsetGameStarted(true);setUseGodCards(false);setGodCardsSelected(0);// Fetch the initial game state from the server\nconst response=await fetch(\"/api/newGame\");await checkAndSetResponse(response);};/**\r\n     * Helper function to check the server response and update the game state.\r\n     */const checkAndSetResponse=async response=>{if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}// If the response is OK, parse it as JSON which returns the new game state\nconst newGameState=await response.json();setGameState(newGameState);// Update game state with response data\nsetSelectedPiece(null);// Reset selected piece after state update\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:newGame,className:\"new-game-button\",children:\"New Game\"}),gameStarted&&!useGodCards&&godCardsSelected===0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleUseGodCards(true),className:\"use-god-card-button\",children:\"Use God Cards\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleUseGodCards(false),className:\"use-god-card-button\",children:\"No God Cards\"})]}),gameStarted&&useGodCards&&godCardsSelected<2&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"select-info\",children:\"Player \".concat(godCardsSelected,\" is selecting a God Card\")}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Demeter'),className:\"god-card-button\",children:\"Demeter\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Hephaestus'),className:\"god-card-button\",children:\"Hephaestus\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Minotaur'),className:\"god-card-button\",children:\"Minotaur\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Pan'),className:\"god-card-button\",children:\"Pan\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Atlas'),className:\"god-card-button\",children:\"Atlas\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Apollo'),className:\"god-card-button\",children:\"Apollo\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSelectGodCard('Artemis'),className:\"god-card-button\",children:\"Artemis\"})]}),gameStarted&&godCardsSelected===2&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:gameState.grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:row.map((cellData,colIndex)=>/*#__PURE__*/_jsx(Cell,{cellData:cellData,onCellClick:handleCellClick,x:rowIndex,y:colIndex,className:selectedPiece&&selectedPiece.x===rowIndex&&selectedPiece.y===colIndex?'selected-cell':''},\"\".concat(rowIndex,\"-\").concat(colIndex)))},rowIndex))}),/*#__PURE__*/_jsx(\"div\",{children:useGodCards&&!gameState.isWinning&&/*#__PURE__*/_jsx(\"button\",{onClick:handlePassAction,className:'pass-button',children:\"Pass Extra Action\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"game-state-message\",children:'Message: '+gameState.message}),/*#__PURE__*/_jsx(\"div\",{className:\"game-info\",children:gameState.isWinning?\"Player \".concat(gameState.currentPlayer,\" wins!\"):\"Player \".concat(gameState.currentPlayer,\"'s Turn, Status: \").concat(gameState.status)})]})]});};export default App;","map":{"version":3,"names":["React","useState","Cell","jsx","_jsx","jsxs","_jsxs","App","initialGrid","Array","from","length","level","hasDome","isOccupied","initialGameState","grid","currentPlayer","status","isWinning","message","gameState","setGameState","selectedPiece","setSelectedPiece","gameStarted","setGameStarted","godCardsSelected","setGodCardsSelected","useGodCards","setUseGodCards","handleSelectGodCard","godCardName","response","fetch","concat","checkAndSetResponse","error","console","handlePassAction","handleCellClick","x","y","log","x1","y1","handleUseGodCards","newGame","ok","Error","newGameState","json","children","onClick","className","map","row","rowIndex","cellData","colIndex","onCellClick"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {CellData, GameState} from './game.tsx';\r\nimport Cell from './Cell.tsx'\r\nimport './App.css';\r\n\r\n/**\r\n * The main React functional component for the board game.\r\n * It handles the game state, player actions, and rendering of the game board.\r\n * The component manages the initialization, movement, and building actions,\r\n * as well as the handling and selection of god cards.\r\n */\r\nconst App: React.FC = () => {\r\n    /**\r\n     * Initialize the game grid with a default structure for each cell.\r\n     * Cells have properties: level, dome status, and occupation status.\r\n     */\r\n    const initialGrid: CellData[][] = Array.from({ length: 5 }, () =>\r\n        Array.from({ length: 5 }, () => ({\r\n            level: 0, // Initial level of construction\r\n            hasDome: false, // Dome status, false initially\r\n            isOccupied: 2, // 2 means not occupied, 0 means occupied by player 0, 1 means occupied by player 1\r\n        }))\r\n    );\r\n\r\n    /**\r\n     * Set up the initial game state with default values.\r\n     * Includes grid, current player, game status, winning condition, and message.\r\n     */\r\n    const initialGameState: GameState = {\r\n        grid: initialGrid,\r\n        currentPlayer: 0, // Start with player 0\r\n        status: 'initialize', // Initial status for game setup\r\n        isWinning: false, // Flag to track if winning condition is met\r\n        message: \"\" // Game state message\r\n    };\r\n\r\n    // State hooks for managing game state\r\n    const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n    const [selectedPiece, setSelectedPiece] = useState<{ x: number, y: number } | null>(null); // Track selected piece\r\n    const [gameStarted, setGameStarted] = useState<boolean>(false); // Flag to track if the game has started\r\n    const [godCardsSelected, setGodCardsSelected] = useState(0); // Counter for selected god cards\r\n    const [useGodCards, setUseGodCards] = useState(false); // Flag to indicate god card usage\r\n\r\n    /**\r\n     * Function to handle the selection of a god card.\r\n     * Sends a request to the server and updates the game state accordingly.\r\n     */\r\n    const handleSelectGodCard = async (godCardName: string) => {\r\n        setGodCardsSelected(godCardsSelected + 1); // Increment god card selection counter\r\n        try {\r\n            const response = await fetch(`/api/setGodClass?godCardName=${godCardName}`); // Send request to server\r\n            await checkAndSetResponse(response); // Process response and update state\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error); // Handle fetch errors\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to handle passing an action.\r\n     * Sends a request to pass the current action and updates the game state.\r\n     */\r\n    const handlePassAction = async () => {\r\n        try {\r\n            const response = await fetch(`/api/passAction?`);\r\n            await checkAndSetResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Handle clicks on cells in the game grid.\r\n     * Depending on the game state, different actions are triggered (initialize, move, build).\r\n     */\r\n    const handleCellClick = async (x: number, y: number) => {\r\n        console.log(`Cell clicked: (${x}, ${y})`);\r\n        try {\r\n            // No action if the game is over\r\n            if (gameState.isWinning) {\r\n                return;\r\n            }\r\n\r\n            if (selectedPiece === null) {\r\n                // Perform build action if status is build\r\n                if (gameState.status === 'build') {\r\n                    const response = await fetch(`/api/build?x1=${x}&y1=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else {\r\n                    // set the selected cell, which will be highlighted\r\n                    setSelectedPiece({x, y});\r\n                }\r\n            } else {\r\n                // Coordinates of the previously selected piece\r\n                let x1: number = selectedPiece.x;\r\n                let y1: number = selectedPiece.y;\r\n                // Perform actions based on the game's current status\r\n                if(gameState.status === 'initialize') {\r\n                    // Initialize worker positions on the board\r\n                    const response = await fetch(`/api/initialize?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                } else if (gameState.status === 'move') {\r\n                    // Move worker from selected position to clicked position\r\n                    const response = await fetch(`/api/move?x1=${x1}&y1=${y1}&x2=${x}&y2=${y}`);\r\n                    await checkAndSetResponse(response);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching data: ', error);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Toggles the use of god cards in the game.\r\n     * Enables or disables the selection of god cards based on player choice.\r\n     */\r\n    const handleUseGodCards = (useGodCards : boolean) => {\r\n        // Update the state to reflect the use or non-use of god cards in this game\r\n        setUseGodCards(useGodCards);\r\n        // If god cards are not being used, set selected god cards as 2 to skip god card selection.\r\n        if (!useGodCards) {\r\n            setGodCardsSelected(2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Starts a new game.\r\n     * Resets the game state and fetches the initial state from the server.\r\n     */\r\n    const newGame = async () => {\r\n        // Set the game as started and reset god cards state\r\n        setGameStarted(true)\r\n        setUseGodCards(false);\r\n        setGodCardsSelected(0);\r\n\r\n        // Fetch the initial game state from the server\r\n        const response = await fetch(`/api/newGame`);\r\n        await checkAndSetResponse(response);\r\n    };\r\n\r\n    /**\r\n     * Helper function to check the server response and update the game state.\r\n     */\r\n    const checkAndSetResponse = async (response: Response) => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        // If the response is OK, parse it as JSON which returns the new game state\r\n        const newGameState: GameState = await response.json();\r\n        setGameState(newGameState); // Update game state with response data\r\n        setSelectedPiece(null); // Reset selected piece after state update\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Button to start a new game */}\r\n            <button onClick={newGame} className=\"new-game-button\">New Game</button>\r\n\r\n            {/* Conditionally render buttons to choose using god cards or not, based on game state */}\r\n            {gameStarted && !useGodCards && godCardsSelected === 0 && (\r\n                <div>\r\n                    <button onClick={() => handleUseGodCards(true)} className=\"use-god-card-button\">Use God Cards</button>\r\n                    <button onClick={() => handleUseGodCards(false)} className=\"use-god-card-button\">No God Cards</button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Render options for selecting god cards, displayed only if god cards are being used and not all have been selected */}\r\n            {gameStarted && useGodCards && godCardsSelected < 2 && (\r\n                <div>\r\n                    <div className=\"select-info\">\r\n                        {`Player ${godCardsSelected} is selecting a God Card`}\r\n                    </div>\r\n                    <button onClick={() => handleSelectGodCard('Demeter')} className=\"god-card-button\">Demeter</button>\r\n                    <button onClick={() => handleSelectGodCard('Hephaestus')} className=\"god-card-button\">Hephaestus</button>\r\n                    <button onClick={() => handleSelectGodCard('Minotaur')} className=\"god-card-button\">Minotaur</button>\r\n                    <button onClick={() => handleSelectGodCard('Pan')} className=\"god-card-button\">Pan</button>\r\n                    <button onClick={() => handleSelectGodCard('Atlas')} className=\"god-card-button\">Atlas</button>\r\n                    <button onClick={() => handleSelectGodCard('Apollo')} className=\"god-card-button\">Apollo</button>\r\n                    <button onClick={() => handleSelectGodCard('Artemis')} className=\"god-card-button\">Artemis</button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Render the game board and display the current game state information after god card selection*/}\r\n            {gameStarted && godCardsSelected === 2 && (\r\n                <div>\r\n                    {/* Game board display with each cell mapped to a Cell component */}\r\n                    <div className=\"game-board\">\r\n                        {gameState.grid.map((row, rowIndex) => (\r\n                            <div key={rowIndex} className=\"board-row\">\r\n                                {row.map((cellData, colIndex) => (\r\n                                    <Cell\r\n                                        key={`${rowIndex}-${colIndex}`}\r\n                                        cellData={cellData}\r\n                                        onCellClick={handleCellClick}\r\n                                        x={rowIndex}\r\n                                        y={colIndex}\r\n                                        className={selectedPiece && selectedPiece.x === rowIndex && selectedPiece.y === colIndex ? 'selected-cell' : ''}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {/* Button to pass the turn, available only when god cards are in use and no player has won yet */}\r\n                    <div>\r\n                        {useGodCards && !gameState.isWinning && (\r\n                            <button onClick={handlePassAction} className={'pass-button'}>Pass Extra Action</button>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Display game state messages such as the current player, status, and if someone has won */}\r\n                    <div className=\"game-state-message\">\r\n                        {'Message: ' + gameState.message}\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        {gameState.isWinning ? `Player ${gameState.currentPlayer} wins!` : `Player ${gameState.currentPlayer}'s Turn, Status: ${gameState.status}`}\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}