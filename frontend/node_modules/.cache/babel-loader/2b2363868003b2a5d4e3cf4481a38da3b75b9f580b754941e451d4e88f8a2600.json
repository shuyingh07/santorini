{"ast":null,"code":"import React from'react';/**\n * CellProps interface defines the props that the Cell component expects.\n * It includes the cell data, a click handler function, coordinates (x, y), and an optional className for styling.\n */import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * The Cell component represents an individual cell on the game board.\n * It displays the cell's content based on its level, dome status, and occupation.\n * Clicking on the cell triggers an action defined in onCellClick.\n */const Cell=_ref=>{let{cellData,onCellClick,x,y,className}=_ref;// Extract level, hasDome, and isOccupied from cellData\nconst{level,hasDome,isOccupied}=cellData;/**\n     * Generates the content to be displayed in the cell based on its level, dome, and occupation status.\n     * Workers are represented as 'W0' or 'W1', a dome is represented as 'O',\n     * and the level of the tower is indicated by square brackets around the content.\n     */const generateContent=(level,hasDome,isOccupied)=>{let baseContent=' ';if(isOccupied===0){baseContent='W0';// Mark the cell as occupied by worker belongs to player 0\n}else if(isOccupied===1){baseContent='W1';// Mark the cell as occupied by worker belongs to player 1\n}else if(hasDome){baseContent='O';// Add a dome symbol if the cell has a dome\n}// Add brackets to represent the level of the tower\nfor(let i=0;i<level;i++){baseContent='['+baseContent+']';}return baseContent;};// Generate the content for this cell\nlet content=generateContent(level,hasDome,isOccupied);// Render the cell as a button with the generated content\nreturn/*#__PURE__*/_jsx(\"button\",{className:className,onClick:()=>onCellClick(x,y),children:content});};export default Cell;","map":{"version":3,"names":["React","jsx","_jsx","Cell","_ref","cellData","onCellClick","x","y","className","level","hasDome","isOccupied","generateContent","baseContent","i","content","onClick","children"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/Cell.tsx"],"sourcesContent":["import React from 'react';\nimport { CellData } from './game';\n\n/**\n * CellProps interface defines the props that the Cell component expects.\n * It includes the cell data, a click handler function, coordinates (x, y), and an optional className for styling.\n */\ninterface CellProps {\n    cellData: CellData;\n    onCellClick: (x: number, y: number) => void;\n    x: number;\n    y: number;\n    className?: string;\n}\n\n/**\n * The Cell component represents an individual cell on the game board.\n * It displays the cell's content based on its level, dome status, and occupation.\n * Clicking on the cell triggers an action defined in onCellClick.\n */\nconst Cell: React.FC<CellProps> = ({ cellData, onCellClick, x, y , className}) => {\n    // Extract level, hasDome, and isOccupied from cellData\n    const { level, hasDome, isOccupied} = cellData;\n\n    /**\n     * Generates the content to be displayed in the cell based on its level, dome, and occupation status.\n     * Workers are represented as 'W0' or 'W1', a dome is represented as 'O',\n     * and the level of the tower is indicated by square brackets around the content.\n     */\n    const generateContent = (level: number, hasDome: boolean, isOccupied: number): string => {\n        let baseContent = ' ';\n        if (isOccupied === 0) {\n            baseContent = 'W0'; // Mark the cell as occupied by worker belongs to player 0\n        } else if (isOccupied === 1) {\n            baseContent = 'W1'; // Mark the cell as occupied by worker belongs to player 1\n        } else if (hasDome) {\n            baseContent = 'O'; // Add a dome symbol if the cell has a dome\n        }\n        // Add brackets to represent the level of the tower\n        for (let i = 0; i < level; i++) {\n            baseContent = '[' + baseContent + ']';\n        }\n        return baseContent;\n    };\n\n    // Generate the content for this cell\n    let content = generateContent(level, hasDome, isOccupied);\n\n    // Render the cell as a button with the generated content\n    return (\n        <button className={className} onClick={() => onCellClick(x, y)}>\n            {content}\n        </button>\n    );\n};\n\nexport default Cell;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,yBAYA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,IAAyB,CAAGC,IAAA,EAAgD,IAA/C,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,CAAC,CAAEC,CAAC,CAAGC,SAAS,CAAC,CAAAL,IAAA,CACzE;AACA,KAAM,CAAEM,KAAK,CAAEC,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAE9C;AACJ;AACA;AACA;AACA,OACI,KAAM,CAAAQ,eAAe,CAAGA,CAACH,KAAa,CAAEC,OAAgB,CAAEC,UAAkB,GAAa,CACrF,GAAI,CAAAE,WAAW,CAAG,GAAG,CACrB,GAAIF,UAAU,GAAK,CAAC,CAAE,CAClBE,WAAW,CAAG,IAAI,CAAE;AACxB,CAAC,IAAM,IAAIF,UAAU,GAAK,CAAC,CAAE,CACzBE,WAAW,CAAG,IAAI,CAAE;AACxB,CAAC,IAAM,IAAIH,OAAO,CAAE,CAChBG,WAAW,CAAG,GAAG,CAAE;AACvB,CACA;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGL,KAAK,CAAEK,CAAC,EAAE,CAAE,CAC5BD,WAAW,CAAG,GAAG,CAAGA,WAAW,CAAG,GAAG,CACzC,CACA,MAAO,CAAAA,WAAW,CACtB,CAAC,CAED;AACA,GAAI,CAAAE,OAAO,CAAGH,eAAe,CAACH,KAAK,CAAEC,OAAO,CAAEC,UAAU,CAAC,CAEzD;AACA,mBACIV,IAAA,WAAQO,SAAS,CAAEA,SAAU,CAACQ,OAAO,CAAEA,CAAA,GAAMX,WAAW,CAACC,CAAC,CAAEC,CAAC,CAAE,CAAAU,QAAA,CAC1DF,OAAO,CACJ,CAAC,CAEjB,CAAC,CAED,cAAe,CAAAb,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}