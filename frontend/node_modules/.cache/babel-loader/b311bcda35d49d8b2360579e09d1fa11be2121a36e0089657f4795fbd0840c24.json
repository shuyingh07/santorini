{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\Cell.tsx\";\nimport React from 'react';\n\n/**\n * Grid interface includes the properties to represent the state of a grid in the game.\n */\n\n/**\n * GridInfo interface defines the props that the grid component expects.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = ({\n  grid,\n  onCellClick,\n  x,\n  y,\n  className\n}) => {\n  const {\n    height,\n    hasDome,\n    occupyStatus\n  } = grid;\n  let content = hasDome ? \"Dome\" : height.toString();\n  let cellStyle = className;\n  if (occupyStatus === 0) {\n    cellStyle += \" yellow-grid\";\n  } else if (occupyStatus === 1) {\n    cellStyle += \" blue-grid\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: cellStyle,\n    onClick: () => onCellClick(x, y),\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport { Cell };\nvar _c;\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Cell","grid","onCellClick","x","y","className","height","hasDome","occupyStatus","content","toString","cellStyle","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/Cell.tsx"],"sourcesContent":["import React from 'react';\n\n/**\n * Grid interface includes the properties to represent the state of a grid in the game.\n */\ninterface Grid {\n    height: number; \n    hasDome: boolean;\n    occupyStatus: number; // Represents occupation status: 0 for player 0, 1 for player 1\n}\n\n/**\n * GridInfo interface defines the props that the grid component expects.\n */\ninterface GridInfo {\n    grid: Grid;\n    onCellClick: (x: number, y: number) => void;\n    x: number;\n    y: number;\n    className?: string;\n}\n\nconst Cell: React.FC<GridInfo> = ({ grid, onCellClick, x, y, className }) => {\n    const { height, hasDome, occupyStatus } = grid;\n    \n    let content = hasDome ? \"Dome\" : height.toString();\n    let cellStyle = className;\n    \n    if (occupyStatus === 0) {\n        cellStyle += \" yellow-grid\";\n    } else if (occupyStatus === 1) {\n        cellStyle += \" blue-grid\"; \n    }\n\n    return (\n        <button className={cellStyle} onClick={() => onCellClick(x, y)}>\n            {content}\n        </button>\n    );\n};\n\nexport { Cell, Grid };"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAOA;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,IAAwB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,WAAW;EAAEC,CAAC;EAAEC,CAAC;EAAEC;AAAU,CAAC,KAAK;EACzE,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGP,IAAI;EAE9C,IAAIQ,OAAO,GAAGF,OAAO,GAAG,MAAM,GAAGD,MAAM,CAACI,QAAQ,CAAC,CAAC;EAClD,IAAIC,SAAS,GAAGN,SAAS;EAEzB,IAAIG,YAAY,KAAK,CAAC,EAAE;IACpBG,SAAS,IAAI,cAAc;EAC/B,CAAC,MAAM,IAAIH,YAAY,KAAK,CAAC,EAAE;IAC3BG,SAAS,IAAI,YAAY;EAC7B;EAEA,oBACIZ,OAAA;IAAQM,SAAS,EAAEM,SAAU;IAACC,OAAO,EAAEA,CAAA,KAAMV,WAAW,CAACC,CAAC,EAAEC,CAAC,CAAE;IAAAS,QAAA,EAC1DJ;EAAO;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEjB,CAAC;AAACC,EAAA,GAjBIlB,IAAwB;AAmB9B,SAASA,IAAI;AAAS,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}