{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\11372\\\\Desktop\\\\s24-hw3-santorini-shuyingh07\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Cell } from './Cell.tsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gameState, setGameState] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [useGodCards, setUseGodCards] = useState(false);\n  const [selectedGodCards, setSelectedGodCards] = useState([]);\n  const createInitialGrid = (size = 5) => {\n    return Array.from({\n      length: size\n    }, () => Array.from({\n      length: size\n    }, () => ({\n      height: 0,\n      hasDome: false,\n      occupyStatus: -1\n    })));\n  };\n  const startNewGame = () => {\n    const initialGrid = createInitialGrid();\n    setGameState({\n      grid: initialGrid,\n      currentPlayer: 0,\n      status: 'initialize',\n      isWinning: false,\n      message: \"\"\n    });\n    setGameStarted(true);\n  };\n  const handleGodCardSelection = useGods => {\n    setUseGodCards(useGods);\n    if (!useGods) {\n      // If god cards are disabled, start the game immediately\n      startGame();\n    }\n  };\n  const selectGodCard = godCardName => {\n    if (selectedGodCards.includes(godCardName)) {\n      setSelectedGodCards(selectedGodCards.filter(card => card !== godCardName));\n    } else if (selectedGodCards.length < 2) {\n      setSelectedGodCards([...selectedGodCards, godCardName]);\n    }\n  };\n  const startGame = () => {\n    // Finalize the setup and start the game\n    console.log(\"Game started with God Cards:\", selectedGodCards);\n    // Optionally send setup to server or initialize game locally\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !gameStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this) : !gameState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGodCardSelection(false),\n        children: \"Disable God Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGodCardSelection(true),\n        children: \"Enable God Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this) : useGodCards && selectedGodCards.length < 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectGodCard('Demeter'),\n        children: \"Demeter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectGodCard('Hephaestus'),\n        children: \"Hephaestus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectGodCard('Minotaur'),\n        children: \"Minotaur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectGodCard('Pan'),\n        children: \"Pan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), selectedGodCards.length === 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: \"Start Game with Selected God Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameState.grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          grid: cell,\n          x: rowIndex,\n          y: colIndex,\n          onCellClick: function (x, y) {\n            throw new Error('Function not implemented.');\n          }\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ZFJ+8k73ORAeo1DS3dIYxrE6ois=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","gameStarted","setGameStarted","useGodCards","setUseGodCards","selectedGodCards","setSelectedGodCards","createInitialGrid","size","Array","from","length","height","hasDome","occupyStatus","startNewGame","initialGrid","grid","currentPlayer","status","isWinning","message","handleGodCardSelection","useGods","startGame","selectGodCard","godCardName","includes","filter","card","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","row","rowIndex","cell","colIndex","x","y","onCellClick","Error","_c","$RefreshReg$"],"sources":["C:/Users/11372/Desktop/s24-hw3-santorini-shuyingh07/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Grid, Cell } from './Cell.tsx';\r\nimport './App.css';\r\n\r\ninterface GameState {\r\n    grid: Grid[][];\r\n    currentPlayer: number;\r\n    status: string;\r\n    isWinning: boolean;\r\n    message: string;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n    const [gameState, setGameState] = useState<GameState | null>(null);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [useGodCards, setUseGodCards] = useState(false);\r\n    const [selectedGodCards, setSelectedGodCards] = useState<string[]>([]);\r\n\r\n    const createInitialGrid = (size = 5): Grid[][] => {\r\n        return Array.from({ length: size }, () =>\r\n            Array.from({ length: size }, () => ({\r\n                height: 0,\r\n                hasDome: false,\r\n                occupyStatus: -1,\r\n            }))\r\n        );\r\n    };\r\n\r\n    const startNewGame = () => {\r\n        const initialGrid = createInitialGrid();\r\n        setGameState({\r\n            grid: initialGrid,\r\n            currentPlayer: 0,\r\n            status: 'initialize',\r\n            isWinning: false,\r\n            message: \"\"\r\n        });\r\n        setGameStarted(true);\r\n    };\r\n\r\n    const handleGodCardSelection = (useGods: boolean) => {\r\n        setUseGodCards(useGods);\r\n        if (!useGods) {\r\n            // If god cards are disabled, start the game immediately\r\n            startGame();\r\n        }\r\n    };\r\n\r\n    const selectGodCard = (godCardName: string) => {\r\n        if (selectedGodCards.includes(godCardName)) {\r\n            setSelectedGodCards(selectedGodCards.filter(card => card !== godCardName));\r\n        } else if (selectedGodCards.length < 2) {\r\n            setSelectedGodCards([...selectedGodCards, godCardName]);\r\n        }\r\n    };\r\n\r\n    const startGame = () => {\r\n        // Finalize the setup and start the game\r\n        console.log(\"Game started with God Cards:\", selectedGodCards);\r\n        // Optionally send setup to server or initialize game locally\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!gameStarted ? (\r\n                <button onClick={startNewGame}>New Game</button>\r\n            ) : !gameState ? (\r\n                <div>\r\n                    <button onClick={() => handleGodCardSelection(false)}>Disable God Cards</button>\r\n                    <button onClick={() => handleGodCardSelection(true)}>Enable God Cards</button>\r\n                </div>\r\n            ) : useGodCards && selectedGodCards.length < 2 ? (\r\n                <div>\r\n                    <button onClick={() => selectGodCard('Demeter')}>Demeter</button>\r\n                    <button onClick={() => selectGodCard('Hephaestus')}>Hephaestus</button>\r\n                    <button onClick={() => selectGodCard('Minotaur')}>Minotaur</button>\r\n                    <button onClick={() => selectGodCard('Pan')}>Pan</button>\r\n                    {selectedGodCards.length === 2 && (\r\n                        <button onClick={startGame}>Start Game with Selected God Cards</button>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"game-board\">\r\n                    {gameState.grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className=\"board-row\">\r\n                            {row.map((cell, colIndex) => (\r\n                                <Cell\r\n                                    key={`${rowIndex}-${colIndex}`}\r\n                                    grid={cell}\r\n                                    x={rowIndex}\r\n                                    y={colIndex} onCellClick={function (x: number, y: number): void {\r\n                                        throw new Error('Function not implemented.');\r\n                                    } }                                />\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}